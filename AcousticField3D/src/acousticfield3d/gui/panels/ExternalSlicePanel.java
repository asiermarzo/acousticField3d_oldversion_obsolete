/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package acousticfield3d.gui.panels;

import acousticfield3d.algorithms.CachedPointFieldCalc;
import acousticfield3d.gui.MainForm;
import acousticfield3d.math.FastMath;
import acousticfield3d.math.Vector3f;
import acousticfield3d.scene.Entity;
import acousticfield3d.scene.Scene;
import acousticfield3d.utils.FileUtils;
import acousticfield3d.utils.ImagesUtils;
import acousticfield3d.utils.Parse;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Asier
 */
public class ExternalSlicePanel extends javax.swing.JPanel {
    
    private float[][] tmpData0;
    private float[][] tmpData1;
    
    private MainForm mf;
    
    public ExternalSlicePanel(MainForm mf) {
        this.mf = mf;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel34 = new javax.swing.JLabel();
        gradientDivText = new javax.swing.JTextField();
        gradientSizeCombo = new javax.swing.JComboBox();
        jLabel40 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        selectButon = new javax.swing.JButton();
        fileText = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        offsetText = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        gainText = new javax.swing.JTextField();
        createButton = new javax.swing.JButton();
        sizeText = new javax.swing.JTextField();
        cleanButton = new javax.swing.JButton();
        uploadButton = new javax.swing.JButton();
        addTmpButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        nPointsText = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        distText = new javax.swing.JTextField();
        accumulateButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        disipationText = new javax.swing.JTextField();

        jLabel34.setText("GradDiv(lambda/X)");

        gradientDivText.setText("5");
        gradientDivText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gradientDivTextActionPerformed(evt);
            }
        });

        gradientSizeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "3", "5", "9" }));
        gradientSizeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gradientSizeComboActionPerformed(evt);
            }
        });

        jLabel40.setText("Stencil size:");

        jLabel2.setText("jLabel2");

        jLabel3.setText("File:");

        selectButon.setText("Select");
        selectButon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButonActionPerformed(evt);
            }
        });

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("offset:");

        offsetText.setText("0");
        offsetText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                offsetTextActionPerformed(evt);
            }
        });

        jLabel5.setText("gain:");

        gainText.setText("1");
        gainText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gainTextActionPerformed(evt);
            }
        });

        createButton.setText("create");
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });

        sizeText.setText("256");

        cleanButton.setText("clean");
        cleanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleanButtonActionPerformed(evt);
            }
        });

        uploadButton.setText("upload");
        uploadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadButtonActionPerformed(evt);
            }
        });

        addTmpButton.setText("add");
        addTmpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTmpButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("NPoints:");

        nPointsText.setText("8");

        jLabel6.setText("dist");

        distText.setText("0.005");

        accumulateButton.setText("Accumulate");
        accumulateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accumulateButtonActionPerformed(evt);
            }
        });

        jLabel7.setText("Disipation:");

        disipationText.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fileText)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(offsetText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gainText))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(createButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sizeText, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cleanButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(uploadButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectButon)
                        .addGap(18, 18, 18)
                        .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nPointsText, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(distText))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addTmpButton)
                            .addComponent(accumulateButton))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(disipationText)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(offsetText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(gainText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createButton)
                    .addComponent(sizeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cleanButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(uploadButton)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(selectButon)
                    .addComponent(addButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fileText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(addTmpButton)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(nPointsText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(distText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(disipationText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addComponent(accumulateButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    
    private void gradientDivTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gradientDivTextActionPerformed
        mf.needUpdate();
    }//GEN-LAST:event_gradientDivTextActionPerformed

    private void gradientSizeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gradientSizeComboActionPerformed
        mf.needUpdate();
    }//GEN-LAST:event_gradientSizeComboActionPerformed

    private void selectButonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectButonActionPerformed
        String path = FileUtils.selectFile(this, "open", ".txt", null);
        if(path != null){
            fileText.setText( path );
        }
    }//GEN-LAST:event_selectButonActionPerformed

    public float getOffset(){
        return Parse.stringToFloat( offsetText.getText() );
    }
    
    public float getGain(){
        return Parse.stringToFloat( gainText.getText() );
    }
    
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        try {
            final float offset = 0.0f;
            final float gain = 1.0f;
            final boolean isPhase = mf.rtSlicePanel.getSelectSliceSource() == RtSlicePanel.Combo_ExternalPhase;
            
            //open file
            String[] lines = new String( FileUtils.getBytesFromFile( new File(fileText.getText()) )).split("\\n");
            String[] splitLine = lines[0].split(",");
            final int W = splitLine.length;
            final int H = lines.length;
            final float[][] data0 = new float[W][H];
            final float[][] data1 = new float[W][H];
            
            //parse: apply offset, gain
            for(int y = 0; y < H; ++y){
                splitLine = lines[y].split(",");
                for(int x = 0; x < W; ++x){
                    final float v = (Parse.stringToFloat(splitLine[x]) + offset) * gain;
                    if(isPhase){
                        data0[x][y] = FastMath.cos(v);
                        data1[x][y] = FastMath.sin(v);
                    }else{
                        data0[x][y] = v;
                        data1[x][y] = 0;
                    }
                }
            }
            
            //interpolate linearly to the nearest power of two
            final int size = FastMath.nearestPowerOfTwo( FastMath.max(W, H) );
            tmpData0 = new float[size][size];
            tmpData1 = new float[size][size];
            ImagesUtils.rescaleMatrix(data0, tmpData0, true);
            ImagesUtils.rescaleMatrix(data1, tmpData1, true);
            
        } catch (IOException ex) {
            Logger.getLogger(ExternalSlicePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_addButtonActionPerformed

    private void offsetTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_offsetTextActionPerformed
        mf.needUpdate();
    }//GEN-LAST:event_offsetTextActionPerformed

    private void gainTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gainTextActionPerformed
        mf.needUpdate();
    }//GEN-LAST:event_gainTextActionPerformed

    private void uploadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadButtonActionPerformed
        //pass it to the renderer
        mf.renderer.assignNewTexture( tmpData0, tmpData1 );
    }//GEN-LAST:event_uploadButtonActionPerformed

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed
        final int size = Parse.stringToInt( sizeText.getText() );
        tmpData0 = new float[size][size];
        tmpData1 = new float[size][size];
    }//GEN-LAST:event_createButtonActionPerformed

    private void setArrayTo0(float[][] a){
        if( a == null) { return; }
        final int w = a.length;
        final int h = a[0].length;
        for(int x = 0; x < w; ++x){
            for(int y = 0; y < h; ++y){
                a[x][y] = 0.0f;
            }
        }
    }
    
    private void cleanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleanButtonActionPerformed
        setArrayTo0(tmpData0);
        setArrayTo0(tmpData1);
    }//GEN-LAST:event_cleanButtonActionPerformed

    private void addTmpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTmpButtonActionPerformed
        //get selected slice
        Entity slice = Scene.getFirstWithTag( mf.getSelection(), Entity.TAG_SLICE);
        if (slice == null) {
            slice = mf.scene.getFirstWithTag( Entity.TAG_SLICE );
            if (slice == null) { return; }
        }
        
        //get center and vectors
        final Vector3f center = slice.getTransform().getTranslation().clone();
        final Vector3f incX = slice.getTransform().transformVector( Vector3f.UNIT_X, null);
        final Vector3f incZ = slice.getTransform().transformVector( Vector3f.UNIT_Y, null);
        center.addLocalInc(incX, -0.5f).addLocalInc(incZ, 0.5f);
        
        //create cached point
        final CachedPointFieldCalc calc = CachedPointFieldCalc.create(center, mf);
        calc.allocate(mf.renderer);
        
        //iterate over the points quering the amplitude
        final int w = tmpData0.length;
        final int h = tmpData0[0].length;
        final double[] phases = mf.simulation.getTransPhasesAsArray();
        
        final float disipation = Parse.stringToFloat( disipationText.getText() );
        final Vector3f target = new Vector3f();
        if (disipation > 0.0f){ //sorry for the repeated code, but did not want another if inside
            for (int x = 0; x < w; ++x) {
                for (int y = 0; y < h; ++y) {
                    target.set(center).addLocalInc(incX, x / (float) w).addLocalInc(incZ, -y / (float) h);
                    calc.setPosition(target);
                    calc.initFieldConstantsOnlyForAmp(mf.renderer);
                    calc.updatePressure(phases);
                    final float val = tmpData0[x][y] + (float) calc.evalPressure() - disipation;
                    tmpData0[x][y] = val > 0 ? val : 0.0f;
                }
            }
        }else{
            for (int x = 0; x < w; ++x) {
                for (int y = 0; y < h; ++y) {
                    target.set(center).addLocalInc(incX, x / (float) w).addLocalInc(incZ, -y / (float) h);
                    calc.setPosition(target);
                    calc.initFieldConstantsOnlyForAmp(mf.renderer);
                    calc.updatePressure(phases);
                    tmpData0[x][y] += (float) calc.evalPressure();
                }
            }
        }
        
        
    }//GEN-LAST:event_addTmpButtonActionPerformed

    private void accumulateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accumulateButtonActionPerformed
        int nPoints = Parse.stringToInt( nPointsText.getText() );
        float distance = Parse.stringToFloat( distText.getText() );
        
        if(nPoints == 0){
            nPoints = 1;
            distance = 0.0f;
        }
        
        //get first control point
        final Entity cp = mf.scene.getFirstWithTag(Entity.TAG_CONTROL_POINT);
        if (cp == null) { return; }
        final Vector3f trans = cp.getTransform().getTranslation();
        final Vector3f pos = trans.clone();
        
        //clean
        cleanButtonActionPerformed(null);
        
        
        for(int j = 0; j < nPoints/4; ++j){
            for(int m = 0; m < 4; ++m){
                int i = j + m*nPoints/4;
                final float angle = FastMath.TWO_PI / nPoints * i;
                //set point 
                trans.set(pos);
                trans.x += distance * FastMath.cos( angle );
                trans.z += distance * FastMath.sin( angle );

                //calc focus
                mf.algorithmsForm.calcFocal();

                //add
                addTmpButtonActionPerformed(null);
            }
        }
        
        trans.set( pos );
        
        final int w = tmpData0.length;
        final int h = tmpData0[0].length;
        
        //divide by nPoints
        final float nP = nPoints;
        for(int x = 0; x < w; ++x){
            for(int y = 0; y < h; ++y){
                tmpData0[x][y] /= nP;
            }
        }
        
        uploadButtonActionPerformed(null);
    }//GEN-LAST:event_accumulateButtonActionPerformed

    public float getGradientDivs(){
        return Parse.stringToFloat( gradientDivText.getText() );
    }
    
    public int getGradientSize(){
        return gradientSizeCombo.getSelectedIndex() + 1;
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton accumulateButton;
    private javax.swing.JButton addButton;
    private javax.swing.JButton addTmpButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cleanButton;
    private javax.swing.JButton createButton;
    private javax.swing.JTextField disipationText;
    private javax.swing.JTextField distText;
    private javax.swing.JTextField fileText;
    private javax.swing.JTextField gainText;
    private javax.swing.JTextField gradientDivText;
    private javax.swing.JComboBox gradientSizeCombo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JTextField nPointsText;
    private javax.swing.JTextField offsetText;
    private javax.swing.JButton selectButon;
    private javax.swing.JTextField sizeText;
    private javax.swing.JButton uploadButton;
    // End of variables declaration//GEN-END:variables

    
}
