/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package acousticfield3d.gui.panels;

import acousticfield3d.gui.MainForm;
import acousticfield3d.gui.MainForm.FieldsToChange;
import acousticfield3d.math.FastMath;
import acousticfield3d.math.Vector3f;
import acousticfield3d.scene.Entity;
import acousticfield3d.scene.Scene;
import acousticfield3d.simulation.Animation;
import acousticfield3d.simulation.Simulation;
import acousticfield3d.simulation.Transducer;
import java.util.ArrayList;
import javax.swing.JTextField;
import ktools.utils.TextFrame;

/**
 *
 * @author Asier
 */
public class TransducersPanel extends javax.swing.JPanel {
    final public MainForm mf;
    
    public TransducersPanel(MainForm mf) {
        this.mf = mf;
        initComponents();
    }

    public JTextField getAmpText() {
        return ampText;
    }

    public JTextField getFrText() {
        return frText;
    }

    public JTextField getPhaseText() {
        return phaseText;
    }

    public JTextField getwText() {
        return wText;
    }
    
    public boolean isPhaseH(){
        return phaseHCheck.isSelected();
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        wText = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        frText = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        ampText = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        phaseText = new javax.swing.JTextField();
        selectAllTransButton = new javax.swing.JButton();
        showHideTransCheck = new javax.swing.JCheckBox();
        phaseHCheck = new javax.swing.JCheckBox();

        wText.setText("0");
        wText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                wTextFocusGained(evt);
            }
        });
        wText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wTextActionPerformed(evt);
            }
        });

        jLabel7.setText("W");

        jLabel8.setText("FR");

        frText.setText("0");
        frText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                frTextFocusGained(evt);
            }
        });
        frText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                frTextActionPerformed(evt);
            }
        });

        jLabel9.setText("A");

        ampText.setText("0");
        ampText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ampTextFocusGained(evt);
            }
        });
        ampText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ampTextActionPerformed(evt);
            }
        });

        jLabel10.setText("PH");

        phaseText.setText("0");
        phaseText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                phaseTextFocusGained(evt);
            }
        });
        phaseText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phaseTextActionPerformed(evt);
            }
        });

        selectAllTransButton.setText("Select All");
        selectAllTransButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllTransButtonActionPerformed(evt);
            }
        });

        showHideTransCheck.setText("Show / Hide");
        showHideTransCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showHideTransCheckActionPerformed(evt);
            }
        });

        phaseHCheck.setText("phaseGrey");
        phaseHCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phaseHCheckActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(wText))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ampText)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(phaseText)
                            .addComponent(frText)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(showHideTransCheck)
                            .addComponent(selectAllTransButton)
                            .addComponent(phaseHCheck))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(ampText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(phaseText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(wText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(frText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addComponent(phaseHCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(showHideTransCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(selectAllTransButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void wTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_wTextFocusGained
        mf.changeSlider(FieldsToChange.wField, "W", mf.simulation.getTransWidth(), 0, Float.MAX_VALUE);
    }//GEN-LAST:event_wTextFocusGained

    private void wTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wTextActionPerformed
        mf.updateTransForField(FieldsToChange.wField, wText.getText());
    }//GEN-LAST:event_wTextActionPerformed

    private void frTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_frTextFocusGained
        mf.changeSlider(FieldsToChange.frField, "FR", 40000, 0, Float.MAX_VALUE);
    }//GEN-LAST:event_frTextFocusGained

    private void frTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_frTextActionPerformed
        mf.updateTransForField(FieldsToChange.frField, frText.getText());
    }//GEN-LAST:event_frTextActionPerformed

    private void ampTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ampTextFocusGained
        mf.changeSlider(FieldsToChange.ampField, "AMP", 1.0f, 0, 1.0f);
    }//GEN-LAST:event_ampTextFocusGained

    private void ampTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ampTextActionPerformed
        mf.updateTransForField(FieldsToChange.ampField, ampText.getText());
    }//GEN-LAST:event_ampTextActionPerformed

    private void phaseTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_phaseTextFocusGained
        mf.changeSlider(FieldsToChange.phaseField, "PHA", FastMath.TWO_PI, Float.MIN_VALUE, Float.MAX_VALUE);
    }//GEN-LAST:event_phaseTextFocusGained

    private void phaseTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phaseTextActionPerformed
        mf.updateTransForField(FieldsToChange.phaseField, phaseText.getText());
    }//GEN-LAST:event_phaseTextActionPerformed

    private void selectAllTransButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllTransButtonActionPerformed
        mf.clearSelection();
        mf.setSelection( mf.simulation.transducers );
        mf.needUpdate();
    }//GEN-LAST:event_selectAllTransButtonActionPerformed

    private void showHideTransCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showHideTransCheckActionPerformed
        Scene.setVisible( mf.scene.getEntities(), Entity.TAG_TRANSDUCER, showHideTransCheck.isSelected());
        mf.needUpdate();
    }//GEN-LAST:event_showHideTransCheckActionPerformed

    private void phaseHCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phaseHCheckActionPerformed
        final boolean ug = phaseHCheck.isSelected();
        for(Transducer t :  mf.simulation.transducers){
            t.useGreyScale = ug;
        }
        mf.needUpdate();
    }//GEN-LAST:event_phaseHCheckActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ampText;
    private javax.swing.JTextField frText;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JCheckBox phaseHCheck;
    private javax.swing.JTextField phaseText;
    private javax.swing.JButton selectAllTransButton;
    private javax.swing.JCheckBox showHideTransCheck;
    private javax.swing.JTextField wText;
    // End of variables declaration//GEN-END:variables

    public void setTransPhase(float f) {
        mf.updateTransForField(FieldsToChange.phaseField, f + "");
        mf.transControlPanel.sendData();
    }

    public void setTransAmp(float f) {
        mf.updateTransForField(FieldsToChange.ampField, f + "");
        mf.transControlPanel.sendData();
    }
    
    public void deleteTransducers(final ArrayList<Transducer> trans){
        //delete transducers from animation->animationKeys
        for(Animation anim : mf.simulation.animations.getElements()){
            anim.deleteTransducers(trans);
        }
        
        //Remove from simulation and scene
        for (Transducer t : trans){
            mf.scene.getEntities().remove( t );
            mf.simulation.transducers.remove( t );
        }
    }

    public void exportMatlabFunc() {
        final StringBuilder sb = new StringBuilder();
        
        sb.append("function field = AcuField(x,y,z,k)\n");
        sb.append("field = ...\n");
        
            
        final float temperature = mf.simPanel.getTemperature();
        final float airSpeed = Simulation.getSoundSpeedInAir(temperature);  // m/s, sound speed in air
                
        for(Transducer t : mf.simulation.transducers){
            final Vector3f pos = t.getTransform().getTranslation();
            final Vector3f normal = t.getTransform().getRotation().mult( Vector3f.UNIT_Y );
            final float amp = t.getPAmplitude();
            final float A = t.getPower();
            final float phase = t.getPhase() * FastMath.PI;
            final float apperture = 0.0045f;
            final float k = FastMath.TWO_PI * t.getFrequency() / airSpeed;      // angular frequency
            
            sb.append("pistonModel([x y z],["+pos.toStringSimpleSwapedYZ()+"],["+normal.toStringSimpleSwapedYZ()+"],"
                    +amp+"*"+A+","+phase+","+ apperture+",k) + ...\n");
        }
        sb.append("0;\n");
        sb.append("end\n\n");
        
        sb.append("function field = pistonModel(sPos, tPos, normal, amp, phase, aperture, k)\n");
        sb.append("    [l,c] = size(ones(size(sPos,1), size(sPos,2)/3));\n");
        sb.append("    sPos = [reshape(sPos(:,1:size(sPos,2)/3),l*c,1) ...\n");
        sb.append("        reshape(sPos(:,size(sPos,2)/3+1:2*size(sPos,2)/3),l*c,1) ...\n");
        sb.append("        reshape(sPos(:,2*size(sPos,2)/3+1:end),l*c,1)];\n");
        sb.append("    tOne = ones(l*c,1); tPos = [tPos(1)*tOne tPos(2)*tOne tPos(3)*tOne];\n");
        sb.append("    diff = tPos - sPos;\n");
        sb.append("    nd = sqrt(dot(diff, diff, 2));\n");
        sb.append("    normal = [normal(1)*tOne normal(2)*tOne normal(3)*tOne];\n");
        sb.append("    nn = sqrt(dot(normal, normal, 2));\n");
        sb.append("    angle = acos(dot(diff, normal, 2) ./ nd ./ nn);\n");
        sb.append("    dum = aperture * k * sin(angle);\n");
        sb.append("    dir =  besselj(1, dum) ./ dum;\n");
        sb.append("    field =  amp ./ nd .* exp(1i * (k*nd + phase)) .* dir;\n");
        sb.append("    field = reshape(field,l,c);\n");
        sb.append("end\n");
        
        /*
        sb.append("function field = pistonModel(sPos, tPos, normal, amp, phase, aperture, k)\n");
        sb.append("    diff = tPos - sPos;\n");
        sb.append("    d = norm(diff);\n");
        sb.append("    angle = acos(dot(diff,normal) / d / norm(normal));\n");
        sb.append("    dum = aperture * k * sin(angle);\n");
        sb.append("    dir =  besselj(1, dum) / dum;\n");
        sb.append("    field =  amp / d * exp(1i * (k*d + phase)) * dir;\n");
        sb.append("end\n");
        */
        
        TextFrame.showText("matlab function", sb.toString(), this);
    }
}
