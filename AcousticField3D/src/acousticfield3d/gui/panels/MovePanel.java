/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package acousticfield3d.gui.panels;

import acousticfield3d.algorithms.DirectHoloTwoSides;
import acousticfield3d.gui.MainForm;
import acousticfield3d.gui.controls.ScriptEditFrame;
import acousticfield3d.math.FastMath;
import acousticfield3d.math.Vector3f;
import acousticfield3d.scene.Entity;
import acousticfield3d.scene.MeshEntity;
import acousticfield3d.simulation.Animation;
import acousticfield3d.simulation.Transducer;
import acousticfield3d.utils.Parse;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.script.ScriptException;

/**
 *
 * @author Asier
 */
public class MovePanel extends javax.swing.JPanel {
    MainForm mf;
    ScriptEditFrame scriptFrame;
    Vector3f startPosition;
    float time;
    Vector3f snapBeadPosition = new Vector3f();
    
    private boolean lastTimeUsedSpaceForDisplay;
    
    private boolean bistable = false;
    
    public MovePanel(MainForm mf) {
        this.mf = mf;
        time = 0.0f;
        startPosition = new Vector3f();
        initComponents();
        scriptFrame = new ScriptEditFrame(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        beadNSpinner = new javax.swing.JSpinner();
        autoCalcCheck = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        speedText = new javax.swing.JTextField();
        leftButton = new javax.swing.JButton();
        upButton = new javax.swing.JButton();
        rightButton = new javax.swing.JButton();
        downButton = new javax.swing.JButton();
        forwardButton = new javax.swing.JButton();
        backwardsButton = new javax.swing.JButton();
        autoSendCheck = new javax.swing.JCheckBox();
        moveCheck = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        currentTimeText = new javax.swing.JTextField();
        resetTimeButton = new javax.swing.JButton();
        plotButton = new javax.swing.JButton();
        distancePlotText = new javax.swing.JTextField();
        cleanButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        scaleXText = new javax.swing.JTextField();
        scaleYText = new javax.swing.JTextField();
        scaleZText = new javax.swing.JTextField();
        editScriptButton = new javax.swing.JButton();
        stepSizeText = new javax.swing.JTextField();
        startTimeText = new javax.swing.JTextField();
        rightButton1 = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        snapButton = new javax.swing.JButton();
        rotYDecButton = new javax.swing.JButton();
        rotYIncButton = new javax.swing.JButton();
        degreesText = new javax.swing.JTextField();
        multiBeadCheck = new javax.swing.JCheckBox();
        autoAddCheck = new javax.swing.JCheckBox();
        rotZIncButton = new javax.swing.JButton();
        rotZDecButton = new javax.swing.JButton();
        lastCommandText = new javax.swing.JTextField();

        jLabel2.setText("N:");

        beadNSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));

        autoCalcCheck.setSelected(true);
        autoCalcCheck.setText("calc");

        jLabel3.setText("Length:");

        speedText.setText("0.001");

        leftButton.setText("L");
        leftButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftButtonActionPerformed(evt);
            }
        });

        upButton.setText("U");
        upButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upButtonActionPerformed(evt);
            }
        });

        rightButton.setText("R");
        rightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightButtonActionPerformed(evt);
            }
        });

        downButton.setText("D");
        downButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downButtonActionPerformed(evt);
            }
        });

        forwardButton.setText("F");
        forwardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forwardButtonActionPerformed(evt);
            }
        });

        backwardsButton.setText("B");
        backwardsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backwardsButtonActionPerformed(evt);
            }
        });

        autoSendCheck.setSelected(true);
        autoSendCheck.setText("send");

        moveCheck.setText("move(ms)");
        moveCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveCheckActionPerformed(evt);
            }
        });

        jLabel5.setText("T:");

        currentTimeText.setEditable(false);
        currentTimeText.setText("0");

        resetTimeButton.setText("Reset");
        resetTimeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetTimeButtonActionPerformed(evt);
            }
        });

        plotButton.setText("Plot");
        plotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plotButtonActionPerformed(evt);
            }
        });

        distancePlotText.setText("1");

        cleanButton.setText("Clean");
        cleanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleanButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Scale XYZ");

        scaleXText.setText("0.1");

        scaleYText.setText("0.1");

        scaleZText.setText("0.1");

        editScriptButton.setText("Edit script");
        editScriptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editScriptButtonActionPerformed(evt);
            }
        });

        stepSizeText.setText("0.01");

        startTimeText.setText("0");

        rightButton1.setText("R");
        rightButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightButton1ActionPerformed(evt);
            }
        });

        resetButton.setText("R");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        snapButton.setText("S");
        snapButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                snapButtonActionPerformed(evt);
            }
        });

        rotYDecButton.setMnemonic('a');
        rotYDecButton.setText("<");
        rotYDecButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotYDecButtonActionPerformed(evt);
            }
        });

        rotYIncButton.setMnemonic('b');
        rotYIncButton.setText(">");
        rotYIncButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotYIncButtonActionPerformed(evt);
            }
        });

        degreesText.setText("5");

        multiBeadCheck.setText("multiBead");

        autoAddCheck.setText("generateAnim");

        rotZIncButton.setMnemonic('c');
        rotZIncButton.setText("^");
        rotZIncButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotZIncButtonActionPerformed(evt);
            }
        });

        rotZDecButton.setText("V");
        rotZDecButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotZDecButtonActionPerformed(evt);
            }
        });

        lastCommandText.setEditable(false);
        lastCommandText.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lastCommandText.setText("last command");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lastCommandText)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(scaleXText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scaleYText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scaleZText))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(plotButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rightButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cleanButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(currentTimeText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resetTimeButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(stepSizeText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(startTimeText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(distancePlotText))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(leftButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(4, 4, 4))
                            .addComponent(rotYDecButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rotZDecButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(upButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(rightButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(2, 2, 2))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(downButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(rotYIncButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(2, 2, 2)
                                        .addComponent(backwardsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(4, 4, 4))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(forwardButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(4, 4, 4))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(rotZIncButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(snapButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(resetButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(editScriptButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(moveCheck)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(speedText, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(degreesText, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(multiBeadCheck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(autoAddCheck))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(beadNSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(autoCalcCheck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(autoSendCheck)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(beadNSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(autoCalcCheck)
                    .addComponent(autoSendCheck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(multiBeadCheck)
                    .addComponent(autoAddCheck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(speedText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(degreesText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(leftButton)
                    .addComponent(upButton)
                    .addComponent(rightButton)
                    .addComponent(forwardButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(downButton)
                    .addComponent(backwardsButton)
                    .addComponent(rotYDecButton)
                    .addComponent(rotYIncButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resetButton)
                    .addComponent(snapButton)
                    .addComponent(rotZIncButton)
                    .addComponent(rotZDecButton))
                .addGap(2, 2, 2)
                .addComponent(lastCommandText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(moveCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(distancePlotText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stepSizeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startTimeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(currentTimeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resetTimeButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(editScriptButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(scaleXText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scaleYText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scaleZText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(plotButton)
                    .addComponent(cleanButton)
                    .addComponent(rightButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    
    public void doAutoCalcAndSend(boolean updateGraphicsAfter){
        final boolean autoCalc = autoCalcCheck.isSelected();
        final boolean autoAdd = autoAddCheck.isSelected();
        final boolean autoSend = autoSendCheck.isSelected();
        
        if (autoCalc) {
            if (multiBeadCheck.isSelected()){
                //Apply the default algorithm
                mf.algorithmsForm.runBFGS(false, updateGraphicsAfter);
                
                //add holo memory
                mf.holoPatternsForm.addMemorizedHoloPattern();
            }else{
                mf.algorithmsForm.runBFGS(false, updateGraphicsAfter);
            }
        }
        
        if( autoAdd ){
            // add the key frame
            mf.animPanel.pressAddKeyFrame();
            
            //add the bead to the new keyframe
            final Entity bead = getBeadEntity();
            if(bead != null){
                final Vector3f pos = bead.getTransform().getTranslation();
                final Animation anim = mf.animPanel.getCurrentAnimation();
                if (anim != null){
                    final int lastFrame = anim.getKeyFrames().getSize() - 1;
                    MeshEntity newBead = mf.cpPanel.createControlPoint(pos.x, pos.y, pos.z, lastFrame, 0, true);
                    mf.animPanel.getCurrentAnimation().getControlPoints().add( newBead );
                    newBead.getTransform().set( bead.getTransform() );
                }
            }
        }
        
        if (autoSend) {
            mf.transControlPanel.sendData();
        }
    }
    
    public Entity getBeadEntity(){
        final int n = (Integer)beadNSpinner.getValue();
        
        //check bead number n in selection
        final ArrayList<Entity> sel = mf.selection;
        if (n < 0 || n >= sel.size()){
            return null;
        }        
        return sel.get( n );
    }
    
    public void applyVector(float x, float y, float z){
        Entity e = getBeadEntity();
        if (e == null){ return;}
        
        final Vector3f t = new Vector3f(x, y, z);
        t.multLocal( getSpeed() );
        
        final ArrayList<Entity> sel = mf.getSelection();
        for (Entity ent : sel) {
            ent.getTransform().getTranslation().addLocal(t);
        }
        
        mf.entityToGUIPosition( e );
        mf.entityToGUIRotation( e );
        if (!multiBeadCheck.isSelected()){
            mf.needUpdate();
            doAutoCalcAndSend(true);
        }else{
            final boolean useDoubleXForDistance = mf.floatingChart.getUseDoubleXRange();
            final int transPerBead = mf.floatingChart.getTransPerBead();
            final boolean useFocal = mf.floatingChart.getUseFocal();
            
            for(Entity ent : sel){
                DirectHoloTwoSides.calcWithTransducers(mf, ent, transPerBead, !useFocal, useDoubleXForDistance);
            }
            mf.transControlPanel.sendData();
            mf.needUpdate();
        }
        
    }
    
    private void snapStartPosition(){
        try {
            Vector3f f0 = scriptFrame.evalScript( getStartingTime() ).multLocal( getScale() );
            startPosition.set ( getBeadEntity().getTransform().getTranslation() );
            startPosition.subtractLocal( f0 );
        } catch (ScriptException ex) {
            Logger.getLogger(MovePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public float getPlotDistance(){
        return Parse.stringToFloat( distancePlotText.getText() );
    }
    
    
    public float getStepSize(){
        return Parse.stringToFloat( stepSizeText.getText() );
    }
    
    public float getStartingTime(){
        return Parse.stringToFloat( startTimeText.getText() );
    }
    
    public Vector3f getScale(){
       return new Vector3f( 
               Parse.stringToFloat( scaleXText.getText() ),
               Parse.stringToFloat( scaleYText.getText() ),
               Parse.stringToFloat( scaleZText.getText() ));
    }
    
    private void displayMessage(String text){
        String first = lastTimeUsedSpaceForDisplay ? "" : " ";
        lastCommandText.setText(first + text);
        lastTimeUsedSpaceForDisplay = !lastTimeUsedSpaceForDisplay;
    }
    
    private void leftButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftButtonActionPerformed
        displayMessage("Left " + getSpeed());
        applyVector(-1,0,0);
    }//GEN-LAST:event_leftButtonActionPerformed

    private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upButtonActionPerformed
        displayMessage("Up " + getSpeed());
        applyVector(0,1,0);
    }//GEN-LAST:event_upButtonActionPerformed

    private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downButtonActionPerformed
        displayMessage("Down " + getSpeed());
        applyVector(0,-1,0);
    }//GEN-LAST:event_downButtonActionPerformed

    private void rightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightButtonActionPerformed
        displayMessage("Right " + getSpeed());
        applyVector(1,0,0);
    }//GEN-LAST:event_rightButtonActionPerformed

    private void forwardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forwardButtonActionPerformed
        displayMessage("Advance " + getSpeed());
        applyVector(0,0,-1);
    }//GEN-LAST:event_forwardButtonActionPerformed

    private void backwardsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backwardsButtonActionPerformed
        displayMessage("Back " + getSpeed());
        applyVector(0,0,1);
    }//GEN-LAST:event_backwardsButtonActionPerformed

    public boolean isMovePath(){
        return moveCheck.isSelected();
    }
    public float getSpeed(){
        return Parse.stringToFloat( speedText.getText() );    
    }
    public float getRot(){
        return Parse.stringToFloat( degreesText.getText() );    
    }
    
    
    private void moveCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveCheckActionPerformed
        
    }//GEN-LAST:event_moveCheckActionPerformed

    private void resetTimeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetTimeButtonActionPerformed
        time = getStartingTime();
        snapStartPosition();
    }//GEN-LAST:event_resetTimeButtonActionPerformed

    private void editScriptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editScriptButtonActionPerformed
        scriptFrame.setVisible( true );
    }//GEN-LAST:event_editScriptButtonActionPerformed

    public void tickPathMovementIfEnabled(){
        if(moveCheck.isSelected()){
            try {
                currentTimeText.setText( time + "");
                Entity bead = getBeadEntity();
                if (bead == null) {return;}
                Vector3f pos = calcPositionFromScript( time );
                bead.getTransform().getTranslation().set(pos);
                doAutoCalcAndSend(true);
                
                time += getStepSize();
            } catch (ScriptException ex) {
                Logger.getLogger(MovePanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    private void plotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plotButtonActionPerformed
        Entity e = getBeadEntity();
        if(e == null || !(e instanceof MeshEntity) ){return;}
        MeshEntity me = (MeshEntity)e;
        
        final float stepSize = getStepSize();
        final float startTime = getStartingTime();
        final float endTime = getPlotDistance();
        final int steps = (int)(( (endTime-startTime) / stepSize) + 1);

        snapStartPosition();
        time = 0;
        try {
            for (int i = 0; i < steps; ++i) {
                time = startTime + i * stepSize;
                Vector3f pos = calcPositionFromScript(time);

                MeshEntity trail = new MeshEntity(me.getMesh(), me.getTexture(), me.getShader());
                trail.getTransform().set(me.getTransform());
                trail.getTransform().getTranslation().set(pos);
                trail.getMaterial().set(me.getMaterial());
                trail.setColor(me.getColor());
                trail.setTag(Entity.TAG_BEAD_MOVE_PATH);
                mf.scene.getEntities().add(trail);

            }
        } catch (ScriptException ex) {
            Logger.getLogger(MovePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        mf.needUpdate();
    }//GEN-LAST:event_plotButtonActionPerformed

    
    
    private void cleanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleanButtonActionPerformed
        mf.scene.removeWithTag( Entity.TAG_BEAD_MOVE_PATH );
        mf.needUpdate();
    }//GEN-LAST:event_cleanButtonActionPerformed

    private void rightButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rightButton1ActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
         Entity e = getBeadEntity();
        if (e == null){ return;}
        e.getTransform().getTranslation().set( snapBeadPosition );
        applyVector(0,0,0);
         applyVector(0,0,0);
         applyVector(0,0,0);
    }//GEN-LAST:event_resetButtonActionPerformed

    public void selectFirstBead() {
        Entity e = mf.scene.getFirstWithTag( Entity.TAG_BEAD | Entity.TAG_CONTROL_POINT );
        if (e == null){ return;}
        mf.clearSelection();
        mf.getSelection().add( e );
        e.selected = true;
    }
    
    private void snapButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_snapButtonActionPerformed
        snapBeadPosition();
    }//GEN-LAST:event_snapButtonActionPerformed

    public void rotateDegrees(float rotY, float rotZ){
        final Entity e = getBeadEntity();
        if (e == null){ return;}
        
        final float ry = rotY * getRot();
        final float currentRY = mf.algorithmsForm.getRotY();
        mf.algorithmsForm.setRotY(currentRY + ry);
        
        final float rz = rotZ * getRot();
        final float currentRZ = mf.algorithmsForm.getRotZ();
        mf.algorithmsForm.setRotZ(currentRZ + rz);
        
        e.getTransform().getRot().rotate(0.0f, -ry * FastMath.DEG_TO_RAD, -rz * FastMath.DEG_TO_RAD);
    }
    
    private void rotYDecButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotYDecButtonActionPerformed
        displayMessage("Rot -Y " + getRot());
        rotateDegrees(-1.0f, 0.0f);
        applyVector(0,0,0);
    }//GEN-LAST:event_rotYDecButtonActionPerformed

    private void rotYIncButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotYIncButtonActionPerformed
        displayMessage("Rot Y " + getRot());
        rotateDegrees(1.0f, 0.0f);
        applyVector(0,0,0);
    }//GEN-LAST:event_rotYIncButtonActionPerformed

    private void rotZIncButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotZIncButtonActionPerformed
        int transOff = 0;
        int transOn = 0;
        
        for(Transducer t : mf.simulation.transducers){
            if (t.getPAmplitude() > 0.5f){
                t.setPAmplitude( 0.0f );
                transOff++;
            }else{
                t.setPAmplitude( 1.0f );
                transOn++;
            }
        }
        
        mf.extraBoard.sendSerialData( (transOff<transOn) ? 1 : 0);
        
        //mf.extraBoard.sendSerialData( bistable ? 1 : 0);
        bistable = !bistable;
        mf.needUpdate();
        mf.transControlPanel.sendData();
        
        
        /*
        displayMessage("Rot Z " + getRot());
        rotateDegrees(0.0f, 1.0f);
        applyVector(0,0,0);*/
    }//GEN-LAST:event_rotZIncButtonActionPerformed

    private void rotZDecButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotZDecButtonActionPerformed
        displayMessage("Rot -Z " + getRot());
        rotateDegrees(0.0f, -1.0f);
        applyVector(0,0,0);
    }//GEN-LAST:event_rotZDecButtonActionPerformed

    public void snapBeadPosition(){
        Entity e = getBeadEntity();
        if (e == null){ return;}
        snapBeadPosition.set( e.getTransform().getTranslation() );
    }
    
    public void snapFirstBead(){
        Entity e = mf.scene.getFirstWithTag( Entity.TAG_BEAD | Entity.TAG_CONTROL_POINT );
        if (e == null){ return;}
        snapBeadPosition.set( e.getTransform().getTranslation() );
    }
    
    private Vector3f calcPositionFromScript(float t) throws ScriptException{
        Vector3f result = scriptFrame.evalScript( t );
        return result.multLocal( getScale() ).addLocal( startPosition );
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox autoAddCheck;
    private javax.swing.JCheckBox autoCalcCheck;
    private javax.swing.JCheckBox autoSendCheck;
    private javax.swing.JButton backwardsButton;
    private javax.swing.JSpinner beadNSpinner;
    private javax.swing.JButton cleanButton;
    private javax.swing.JTextField currentTimeText;
    private javax.swing.JTextField degreesText;
    private javax.swing.JTextField distancePlotText;
    private javax.swing.JButton downButton;
    private javax.swing.JButton editScriptButton;
    private javax.swing.JButton forwardButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField lastCommandText;
    private javax.swing.JButton leftButton;
    private javax.swing.JCheckBox moveCheck;
    private javax.swing.JCheckBox multiBeadCheck;
    private javax.swing.JButton plotButton;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton resetTimeButton;
    private javax.swing.JButton rightButton;
    private javax.swing.JButton rightButton1;
    private javax.swing.JButton rotYDecButton;
    private javax.swing.JButton rotYIncButton;
    private javax.swing.JButton rotZDecButton;
    private javax.swing.JButton rotZIncButton;
    private javax.swing.JTextField scaleXText;
    private javax.swing.JTextField scaleYText;
    private javax.swing.JTextField scaleZText;
    private javax.swing.JButton snapButton;
    private javax.swing.JTextField speedText;
    private javax.swing.JTextField startTimeText;
    private javax.swing.JTextField stepSizeText;
    private javax.swing.JButton upButton;
    // End of variables declaration//GEN-END:variables

    public void recenterToSel() {
        if (mf.selection.size() != 1){
            return;
        }
        
        final Vector3f pos = mf.selection.get(0).getTransform().getTranslation().clone();
        
        for(Entity e : mf.scene.getEntities()){
            e.getTransform().getTranslation().subtractLocal(pos);
        }
        mf.needUpdate();
    }

    
}
