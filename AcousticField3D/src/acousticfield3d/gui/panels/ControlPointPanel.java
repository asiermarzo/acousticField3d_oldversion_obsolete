/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package acousticfield3d.gui.panels;

import acousticfield3d.algorithms.CachedPointFieldCalc;
import acousticfield3d.gui.MainForm;
import acousticfield3d.math.FastMath;
import acousticfield3d.math.Vector2f;
import acousticfield3d.math.Vector3f;
import acousticfield3d.scene.Entity;
import acousticfield3d.scene.MeshEntity;
import acousticfield3d.scene.PhysicEntity;
import acousticfield3d.scene.Resources;
import acousticfield3d.scene.Scene;
import acousticfield3d.utils.Color;
import acousticfield3d.utils.Parse;
import java.util.ArrayList;

/**
 *
 * @author Asier
 */
public class ControlPointPanel extends javax.swing.JPanel {
    CachedPointFieldCalc cachedPoint;
    public MainForm mf;
    
    public ControlPointPanel(MainForm mf) {
        this.mf = mf;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cpEnableCheck = new javax.swing.JCheckBox();
        jLabel41 = new javax.swing.JLabel();
        cpSizeText = new javax.swing.JTextField();
        jLabel43 = new javax.swing.JLabel();
        cpColorText = new javax.swing.JTextField();
        cpAddButton = new javax.swing.JButton();
        cpDelButton = new javax.swing.JButton();
        placeBeadAtSliceCheck = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        numberText = new javax.swing.JTextField();
        allVisibleButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        onlyVisibleButton = new javax.swing.JButton();
        selectAllButton = new javax.swing.JButton();
        pressureCheck = new javax.swing.JCheckBox();
        ampText = new javax.swing.JTextField();
        phaseText = new javax.swing.JTextField();
        gorkovCheck = new javax.swing.JCheckBox();
        ggxText = new javax.swing.JTextField();
        ggyText = new javax.swing.JTextField();
        ggzText = new javax.swing.JTextField();
        gorkovText = new javax.swing.JTextField();
        laplacianCheck = new javax.swing.JCheckBox();
        forceProportionCheck = new javax.swing.JCheckBox();

        cpEnableCheck.setText("enable");
        cpEnableCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cpEnableCheckActionPerformed(evt);
            }
        });

        jLabel41.setText("size:");

        cpSizeText.setText("0.001");
        cpSizeText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cpSizeTextActionPerformed(evt);
            }
        });

        jLabel43.setText("Color:");

        cpColorText.setText("255,255,255,255");
        cpColorText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cpColorTextActionPerformed(evt);
            }
        });

        cpAddButton.setText("Add");
        cpAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cpAddButtonActionPerformed(evt);
            }
        });

        cpDelButton.setText("Del");
        cpDelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cpDelButtonActionPerformed(evt);
            }
        });

        placeBeadAtSliceCheck.setText("PlaceBeadAtSlice");

        jLabel1.setText("Number:");

        numberText.setText("0");

        allVisibleButton.setText("All");
        allVisibleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allVisibleButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Visible:");

        onlyVisibleButton.setText("O");
        onlyVisibleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onlyVisibleButtonActionPerformed(evt);
            }
        });

        selectAllButton.setText("S A");
        selectAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllButtonActionPerformed(evt);
            }
        });

        pressureCheck.setText("pre");

        ampText.setText("amp");

        phaseText.setText("phase");

        gorkovCheck.setText("gorkov");

        ggxText.setText("x");

        ggyText.setText("y");

        ggzText.setText("z");

        gorkovText.setText("gorkov");

        laplacianCheck.setText("laplacian");

        forceProportionCheck.setText("ForPro");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ggxText)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cpEnableCheck)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel41)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cpSizeText, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel43)
                        .addGap(7, 7, 7)
                        .addComponent(cpColorText))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(numberText))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ampText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(phaseText))
                    .addComponent(ggyText)
                    .addComponent(ggzText)
                    .addComponent(gorkovText)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(selectAllButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cpAddButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cpDelButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(allVisibleButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(onlyVisibleButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(placeBeadAtSliceCheck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(forceProportionCheck))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(pressureCheck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(gorkovCheck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(laplacianCheck)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cpEnableCheck)
                    .addComponent(jLabel41)
                    .addComponent(cpSizeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel43)
                    .addComponent(cpColorText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(numberText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(allVisibleButton)
                    .addComponent(onlyVisibleButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectAllButton)
                    .addComponent(cpAddButton)
                    .addComponent(cpDelButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(placeBeadAtSliceCheck)
                    .addComponent(forceProportionCheck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pressureCheck)
                    .addComponent(gorkovCheck)
                    .addComponent(laplacianCheck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ampText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(phaseText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gorkovText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ggxText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ggyText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ggzText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    public MeshEntity createControlPoint(float x, float y, float z, int frame, int number, boolean isBead){
        MeshEntity me = new PhysicEntity(Resources.MESH_SPHERE, null, Resources.SHADER_SOLID_SPEC);
        me.setTag( isBead ? (Entity.TAG_BEAD | Entity.TAG_CONTROL_POINT) : Entity.TAG_CONTROL_POINT);
        me.setFrame( frame );
        
        me.setColor( Color.parse( getControlPointColor() ) );
        me.getTransform().getScale().set( getControlPointSize() );
        me.getTransform().getTranslation().set(x, y, z);
        if (number == -1){
            number = getNumber();
        }
        me.setNumber( number );
        return me;
    }
    
    public MeshEntity addControlPoint(float x, float y, float z, int frame, int number, boolean isBead){
        MeshEntity me = createControlPoint(x, y, z, frame, number, isBead);
        mf.scene.getEntities().add( me );
        if(isBead){
            final ArrayList<MeshEntity> controlPoints = mf.animPanel.currentAnimation.getControlPoints();
            if (number == -1){
                me.setNumber( controlPoints.size() );
            }
            controlPoints.add( me );
        }else{
            mf.simulation.getControlPoints().add(me);
        }
        return me;
    }
    
    
    private void cpEnableCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cpEnableCheckActionPerformed
        Scene.setVisible( mf.scene.getEntities(), Entity.TAG_CONTROL_POINT, cpEnableCheck.isSelected());
        mf.needUpdate();
    }//GEN-LAST:event_cpEnableCheckActionPerformed

    private void cpSizeTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cpSizeTextActionPerformed
        final float size = getControlPointSize();
        for (Entity e : mf.selection){
            if (e.getTag() == Entity.TAG_CONTROL_POINT ){
                e.getTransform().getScale().set( size );
            }
        }
        mf.needUpdate();
    }//GEN-LAST:event_cpSizeTextActionPerformed

    private void cpColorTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cpColorTextActionPerformed
        final int color = Color.parse( getControlPointColor() );
        for (Entity e : mf.selection){
            if (e.getTag() == Entity.TAG_CONTROL_POINT && (e instanceof MeshEntity)){
                MeshEntity me = (MeshEntity)e;
                me.setColor( color );
            }
        }
        mf.needUpdate();
    }//GEN-LAST:event_cpColorTextActionPerformed

    private void cpAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cpAddButtonActionPerformed
        Vector3f sCenter = mf.simulation.getSimulationCenter();
        addControlPoint (sCenter.x, sCenter.y, sCenter.z, getNumber(), 0, false);
        mf.needUpdate();
    }//GEN-LAST:event_cpAddButtonActionPerformed

    public boolean isClickAndPlace(){
        return placeBeadAtSliceCheck.isSelected();
    }
    
    private void cpDelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cpDelButtonActionPerformed
        //Remove from simulation and scene
        for (Entity e : mf.selection){
            if (e.getTag() == Entity.TAG_CONTROL_POINT){
                mf.scene.getEntities().remove( e );
                mf.simulation.controlPoints.remove( e );
            }
        }
        mf.clearSelection();
        mf.needUpdate();
    }//GEN-LAST:event_cpDelButtonActionPerformed

    private void allVisibleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allVisibleButtonActionPerformed
        Scene.setVisible( mf.scene.getEntities() , Entity.TAG_CONTROL_POINT, true);
    }//GEN-LAST:event_allVisibleButtonActionPerformed

    private void onlyVisibleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onlyVisibleButtonActionPerformed
        setOnlyCurrentCPsVisible( getNumber() , -1);
        mf.needUpdate();
    }//GEN-LAST:event_onlyVisibleButtonActionPerformed

    private void selectAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllButtonActionPerformed
        selectAll();
        mf.needUpdate();
    }//GEN-LAST:event_selectAllButtonActionPerformed

    
    public void selectAll() {
        mf.clearSelection();
        for(MeshEntity me : mf.scene.getEntities()){
            if ( (me.getTag() & Entity.TAG_CONTROL_POINT) != 0){
                me.selected = true;
                mf.selection.add(me);
            }
        }
    }
    
    public Entity selectFrame(int frame) {
        mf.clearSelection();
        for(MeshEntity me : mf.scene.getEntities()){
            if ( (me.getTag() & Entity.TAG_CONTROL_POINT) != 0 &&
                    me.getFrame() == frame){
                me.selected = true;
                mf.selection.add(me);
            }
        }
        if (mf.selection.isEmpty()){
            return null;
        }else{
            return mf.selection.get(0);
        }
    }
    
    public void setOnlyCurrentCPsVisible(int frame, int number){
        Scene.setVisible( mf.scene.getEntities() , Entity.TAG_CONTROL_POINT, frame, number ,true);
    }
    
    public String getControlPointColor(){
        return cpColorText.getText();
    }
    
    public int getNumber(){
        return Parse.stringToInt( numberText.getText() );
    }
    
    public float getControlPointSize(){
        return Parse.stringToFloat( cpSizeText.getText() );
    }
    
    public void resetCachedPoint(){
        cachedPoint = null;
    }
    
    public void updateControlPointValues(){
        final boolean calcPressure = pressureCheck.isSelected();
        final boolean calcGorkov = gorkovCheck.isSelected();
        final boolean calcLaplacianGork = laplacianCheck.isSelected();
        final boolean calcForceProportions = forceProportionCheck.isSelected();
        
        if (!calcPressure && !calcGorkov && !calcLaplacianGork){
            return;
        }
        if(mf.selection.isEmpty()){
            return;
        }
        if(cachedPoint == null || cachedPoint.getNTrans() != mf.renderer.getnTransducers()){
            final boolean directivity = ! mf.miscPanel.isAnalyticalNoDirShaders();
            final float h = mf.simPanel.getWaveLength() / mf.miscPanel.getFiniteDiffH();
            cachedPoint = new CachedPointFieldCalc(Vector3f.ZERO, false, directivity, h, mf.renderer);
            cachedPoint.allocate(mf.renderer);
        }
        
        final Vector3f p = mf.selection.get(0).getTransform().getTranslation();
        cachedPoint.setPosition(p);
        
        if(calcLaplacianGork){
            cachedPoint.initFieldConstants(mf.renderer);
            cachedPoint.updateGorkovLaplacian(mf.simulation.getTransPhasesAsArray() );
        }else if(calcGorkov){
            cachedPoint.initFieldConstants(mf.renderer);
            cachedPoint.updateGorkovGradient(mf.simulation.getTransPhasesAsArray() );
        }else if(calcPressure){
            cachedPoint.initFieldConstants(mf.renderer);
            cachedPoint.updatePressure( mf.simulation.getTransPhasesAsArray() );
        }
       
        
        if (calcPressure){
            Vector2f field = new Vector2f();
            cachedPoint.evalField(field);
            ampText.setText( field.length() + "");
            phaseText.setText( (field.getAngle() / FastMath.PI) + ""); 
        }
        
        if(calcGorkov){
            Vector3f g = new Vector3f();
            if(calcForceProportions){
                g.x = (float)cachedPoint.evalGorkovGradientXProportion();
                g.y = (float)cachedPoint.evalGorkovGradientYProportion();
                g.z = (float)cachedPoint.evalGorkovGradientZProportion();
            }else{
                g.x = (float)cachedPoint.evalGorkovGradientX();
                g.y = (float)cachedPoint.evalGorkovGradientY();
                g.z = (float)cachedPoint.evalGorkovGradientZ();
            }
            float gor = (float)cachedPoint.evalGorkov();
            
            gorkovText.setText( gor + "");
            
            ggxText.setText( g.x + "" );
            ggyText.setText( g.y + "");
            ggzText.setText( g.z + "" );
        }else if(calcLaplacianGork){
            float laplacianG = (float)cachedPoint.evalGorkovLaplacian();
            Vector3f g = new Vector3f();
            g.x = (float)cachedPoint.evalGorkovLaplacianX();
            g.y = (float)cachedPoint.evalGorkovLaplacianY();
            g.z = (float)cachedPoint.evalGorkovLaplacianZ();
            
            gorkovText.setText( laplacianG + "");
            
            ggxText.setText( g.x + "" );
            ggyText.setText( g.y + "");
            ggzText.setText( g.z + "" );
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton allVisibleButton;
    private javax.swing.JTextField ampText;
    private javax.swing.JButton cpAddButton;
    private javax.swing.JTextField cpColorText;
    private javax.swing.JButton cpDelButton;
    private javax.swing.JCheckBox cpEnableCheck;
    private javax.swing.JTextField cpSizeText;
    private javax.swing.JCheckBox forceProportionCheck;
    private javax.swing.JTextField ggxText;
    private javax.swing.JTextField ggyText;
    private javax.swing.JTextField ggzText;
    private javax.swing.JCheckBox gorkovCheck;
    private javax.swing.JTextField gorkovText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JCheckBox laplacianCheck;
    private javax.swing.JTextField numberText;
    private javax.swing.JButton onlyVisibleButton;
    private javax.swing.JTextField phaseText;
    private javax.swing.JCheckBox placeBeadAtSliceCheck;
    private javax.swing.JCheckBox pressureCheck;
    private javax.swing.JButton selectAllButton;
    // End of variables declaration//GEN-END:variables

    public void distanceToClosestCP() {
        //get lockedEntity object
        final Entity selectedObject = mf.reportFrame.getLockedEntity();
        if(selectedObject  == null){
            return;
        }
        
        //get a list of the control points
        ArrayList<MeshEntity> controlPoints = new ArrayList<>();
        mf.scene.gatherMeshEntitiesWithTag(controlPoints, Entity.TAG_CONTROL_POINT);
        
        //remove selected object
        controlPoints.remove( selectedObject );
        
        //get the closest
        if (controlPoints.isEmpty()){
            return;
        }
        final Vector3f selPos = selectedObject.getTransform().getTranslation();
        Entity closest = controlPoints.get(0);
        float distance = Float.MAX_VALUE;
        for(Entity e : controlPoints){
            final float currentDistance = e.getTransform().getTranslation().distance( selPos );
            
            if(currentDistance < distance){
                distance = currentDistance;
                closest = e;
            }
        }
        
        //report sel position, other position, distance
        final Vector3f center = mf.reportFrame.getPosition();
        final Vector3f closestPos = closest.getTransform().getTranslation();
        final Vector3f diff = selPos.subtract( closestPos );
        StringBuilder sb = new StringBuilder();
        
        sb.append("distance " + center.distance(closestPos));
        sb.append(" sel " + selPos.toStringSimple());
        sb.append(" closest " + closestPos.toStringSimple());
        sb.append(" diff " + diff.toStringSimple());
        sb.append(" dist " + diff.length() + "\n");
        
        mf.reportFrame.addLine( sb.toString() );
    }

    public void addSelAsBead() {
        //get selected control point
        final Entity selCP = mf.movePanel.getBeadEntity();
        if (selCP == null) { return; }
        
        //add bead clone to the current animation
        final Vector3f pos = selCP.getTransform().getTranslation();
        addControlPoint(pos.x, pos.y, pos.z, 0, -1, true);
    }

    

    
}
