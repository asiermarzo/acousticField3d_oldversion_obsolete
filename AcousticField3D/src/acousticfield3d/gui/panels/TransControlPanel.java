/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package acousticfield3d.gui.panels;

import acousticfield3d.gui.MainForm;
import acousticfield3d.scene.Entity;
import acousticfield3d.simulation.AnimKeyFrame;
import acousticfield3d.simulation.Transducer;
import acousticfield3d.utils.Parse;
import acousticfield3d.utils.uartComm.SerialComms;
import acousticfield3d.utils.usbcomm.UsbDevice;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JCheckBox;
import javax.swing.JSpinner;
import javax.swing.JTextField;

/**
 *
 * @author Asier
 */
public class TransControlPanel extends javax.swing.JPanel {
    public static final int UH_phaseDisc = 25;
    public static final int MAX_BOARDS = 4;        
    
    private final HashMap<Transducer, ArrayList<Transducer>> transducersCopy = new HashMap<Transducer, ArrayList<Transducer>>();
    private final HashMap<Transducer, ArrayList<Float>> transducersCopyOffsets = new HashMap<Transducer, ArrayList<Float>>();
    
    MainForm mf;
    
    final SerialComms[] serialComs = new SerialComms[MAX_BOARDS];
    
    UsbDevice usbDevice = null;
    
    
    public TransControlPanel(MainForm mf) {
        this.mf = mf;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        targetDeviceGroup = new javax.swing.ButtonGroup();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        phaseSpinner = new javax.swing.JSpinner();
        ampCheck = new javax.swing.JCheckBox();
        sendButton = new javax.swing.JButton();
        autoCheck = new javax.swing.JCheckBox();
        labelButton = new javax.swing.JButton();
        labelText = new javax.swing.JTextField();
        initSerialButton = new javax.swing.JButton();
        stopSerialButton = new javax.swing.JButton();
        serialRadio = new javax.swing.JRadioButton();
        uhRadio = new javax.swing.JRadioButton();
        addressText = new javax.swing.JTextField();
        frModCheck = new javax.swing.JCheckBox();
        frModText = new javax.swing.JTextField();
        resetButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        coresText = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        transText = new javax.swing.JTextField();
        connectAllButton = new javax.swing.JButton();
        dynamicTablesCheck = new javax.swing.JCheckBox();
        periodsText = new javax.swing.JTextField();
        periodsButton = new javax.swing.JButton();
        periods2Text = new javax.swing.JTextField();
        switchBetween1_2Button = new javax.swing.JButton();

        jButton1.setText("jButton1");

        jLabel1.setText("Phase:");

        phaseSpinner.setModel(new javax.swing.SpinnerNumberModel());
        phaseSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                phaseSpinnerStateChanged(evt);
            }
        });

        ampCheck.setText("On");
        ampCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ampCheckActionPerformed(evt);
            }
        });

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        autoCheck.setSelected(true);
        autoCheck.setText("Auto");

        labelButton.setText("Order");
        labelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                labelButtonActionPerformed(evt);
            }
        });

        labelText.setText("0");

        initSerialButton.setText("C");
        initSerialButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initSerialButtonActionPerformed(evt);
            }
        });

        stopSerialButton.setText("Stop");
        stopSerialButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopSerialButtonActionPerformed(evt);
            }
        });

        targetDeviceGroup.add(serialRadio);
        serialRadio.setSelected(true);
        serialRadio.setText("Serial");

        targetDeviceGroup.add(uhRadio);
        uhRadio.setText("UH");

        addressText.setText("10951.257.1.0.1");

        frModCheck.setText("frMod");
        frModCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                frModCheckActionPerformed(evt);
            }
        });

        frModText.setText("200");
        frModText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                frModTextActionPerformed(evt);
            }
        });

        resetButton.setText("R");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("cores:");

        coresText.setText("16");

        jLabel3.setText("trans");

        transText.setText("16");

        connectAllButton.setText("CA");
        connectAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectAllButtonActionPerformed(evt);
            }
        });

        dynamicTablesCheck.setText("DT");
        dynamicTablesCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dynamicTablesCheckActionPerformed(evt);
            }
        });

        periodsText.setText("40000");

        periodsButton.setText("P");
        periodsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                periodsButtonActionPerformed(evt);
            }
        });

        periods2Text.setText("10000");

        switchBetween1_2Button.setText("B");
        switchBetween1_2Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                switchBetween1_2ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addressText)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sendButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(autoCheck))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelText))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(initSerialButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(connectAllButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(stopSerialButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(frModCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(frModText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resetButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(dynamicTablesCheck))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(periodsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(periodsText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(periods2Text)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(switchBetween1_2Button))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(serialRadio)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(uhRadio))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(phaseSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(ampCheck))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(coresText, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(transText, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(phaseSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ampCheck))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sendButton)
                    .addComponent(autoCheck))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(periodsText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(periodsButton)
                    .addComponent(periods2Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(switchBetween1_2Button))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelButton)
                    .addComponent(labelText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serialRadio)
                    .addComponent(uhRadio)
                    .addComponent(dynamicTablesCheck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addressText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(frModCheck)
                    .addComponent(frModText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resetButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(coresText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(transText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(initSerialButton)
                    .addComponent(stopSerialButton)
                    .addComponent(connectAllButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void initSerialButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initSerialButtonActionPerformed
       initComm();
    }//GEN-LAST:event_initSerialButtonActionPerformed

    private void stopSerialButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopSerialButtonActionPerformed
        stopComm();
    }//GEN-LAST:event_stopSerialButtonActionPerformed
    
    
    public void initComm(){
        stopComm();
        if( serialRadio.isSelected()){
            initSerialComm( -1 );
        }else if( uhRadio.isSelected()){
            initUHComm();
        }        
    }
    
    public void stopComm(){
        stopSerialComm();
        stopUHComm();
    }
    
    public void sendData(){
        if( isDynamicTables() ){           
            mf.transControlPanel.sendAnimation( mf.animPanel.currentAnimation.keyFrames.getElements() );
            return;
        }
        
        if( serialRadio.isSelected()){
            sendSerialData();
        }else if( uhRadio.isSelected()){
            try {
                sendUHData();
            } catch (IOException ex) {
                Logger.getLogger(TransControlPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    
    public boolean updatePhaseSpinner = false;
    private void phaseSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_phaseSpinnerStateChanged
        if(! updatePhaseSpinner){
            updatePhaseSpinner = true;
            return;
        }
        final float value = (Integer) phaseSpinner.getValue();
        final float disc = mf.miscPanel.getPhaseDiscretization();
        mf.updateTransForField(MainForm.FieldsToChange.phaseField, (value / disc) + "");
        if(isAuto()){
            sendData();
        }
    }//GEN-LAST:event_phaseSpinnerStateChanged

    private void ampCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ampCheckActionPerformed
        mf.updateTransForField(MainForm.FieldsToChange.ampField, ampCheck.isSelected() ? "1.0" : "0.0");
        if(isAuto()){
            sendData();
        }
    }//GEN-LAST:event_ampCheckActionPerformed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        sendData();
    }//GEN-LAST:event_sendButtonActionPerformed

    
    private void labelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_labelButtonActionPerformed
        int number = Integer.parseInt( labelText.getText() );
        for(Entity e: mf.getSelection()){
            if(e instanceof Transducer){
                Transducer t = (Transducer)e;
                t.setOrderNumber(number);
                number++;
            }
        }
        mf.simulation.sortTransducers();
        mf.simulation.labelNumberTransducers();
    }//GEN-LAST:event_labelButtonActionPerformed

    private void frModCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_frModCheckActionPerformed
        sendData();
    }//GEN-LAST:event_frModCheckActionPerformed

    private void frModTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_frModTextActionPerformed
        sendData();
    }//GEN-LAST:event_frModTextActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        try {
            setOffUH();
        } catch (IOException ex) {
            Logger.getLogger(TransControlPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_resetButtonActionPerformed

    private void connectAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectAllButtonActionPerformed
        stopSerialComm();
        for(int i = 0; i < MAX_BOARDS; ++i){
            serialComs[i] = new SerialComms(-1);
        }
    }//GEN-LAST:event_connectAllButtonActionPerformed

    private void dynamicTablesCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dynamicTablesCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dynamicTablesCheckActionPerformed

    private void periodsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_periodsButtonActionPerformed
        if(! isDynamicTables()){
            return;
        }
        if (serialComs[0] == null) { return; }
        
        final int periods = Parse.stringToInt( periodsText.getText());
        
        //send command code (3)
        serialComs[0].writeByte(3);
        //send frame number as an ushort
        serialComs[0].writeUShort(periods);
        
    }//GEN-LAST:event_periodsButtonActionPerformed

    private void switchBetween1_2ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switchBetween1_2ButtonActionPerformed
        final int periods1 = Parse.stringToInt( periodsText.getText());
        final int periods2 = Parse.stringToInt( periods2Text.getText());
        
        sendSwitchValues(periods1, periods2);
    }//GEN-LAST:event_switchBetween1_2ButtonActionPerformed

    public void sendSwitchValues(int a, int b){
         if(! isDynamicTables()){
            return;
        }
        if (serialComs[0] == null) { return; }
        //send command code (4)
        serialComs[0].writeByte(4);
        //send frame number as an ushort
        serialComs[0].writeUShort(a);
        serialComs[0].writeUShort(b);
    }
    
    public int getNCores(){
        return Parse.stringToInt( coresText.getText() );
    }
    
    public int getNTrans(){
        return Parse.stringToInt( transText.getText() );
    }
    

    public boolean isAuto(){
        return autoCheck.isSelected();
    }
    
    
    private int intertwinedPosition(final int order,final int halfTrans){
        if (order < halfTrans) {
            return order * 2;
        } else {
            return 1 + (order - halfTrans) * 2;
        }
    }
    
    public void sendSerialDataOfBoard(final int nBoard){
        if (nBoard < 0 || nBoard >= serialComs.length) {return;}
        final SerialComms board = serialComs[nBoard];
        if(board == null) {return;}
        
        final int nTransPerBoard = mf.miscPanel.getTransducersNumber();
        final int halfTrans = nTransPerBoard / 2;
        final int phaseDisc = mf.miscPanel.getPhaseDiscretization();
        final int phaseForOff = phaseDisc * 2;
        final int offset = nBoard * nTransPerBoard;
        final int[] data = new int[nTransPerBoard];
        Arrays.fill(data, phaseForOff); //by default they are off

        //fill with transducer data
        for (Transducer t : mf.simulation.transducers) {
            final int order = t.getOrderNumber() - offset;
            if (order < 0 || order >= nTransPerBoard) {
                continue;
            }

            int phase = t.getXMOSPhase(phaseDisc, phaseForOff);
              
            //interwine data
            final int position = intertwinedPosition(order, halfTrans);
            
            data[position] = phase;
        }

        board.write( data );
    }
    
    void sendSerialData(){
        //check that at least we are connected to one board
        if(serialComs[0] == null){
            return;
        }
        boolean multipleBoards = false;
        for(int i = 1; i < MAX_BOARDS; ++i){
            if (serialComs[i] != null){
                multipleBoards = true;
                break;
            }
        }
         
        final int nTransPerBoard = mf.miscPanel.getTransducersNumber();
        final int halfTrans = nTransPerBoard / 2;
        final int phaseDisc = Math.round(mf.miscPanel.getPhaseDiscretization());
        final int phaseForOff = phaseDisc * 2;
        final int totalTrans = nTransPerBoard * MAX_BOARDS;
                
        //create array, fill it with off pattern
        final int[] data = new int[totalTrans];
        Arrays.fill(data, phaseForOff);

        //fill with transducer data
        for (Transducer t : mf.simulation.transducers) {
            final int order = t.getOrderNumber();
            if (order < 0 || order >= totalTrans) {
                continue;
            }

            int phase = t.getXMOSPhase(phaseDisc, phaseForOff);

            //which board
            final int board = order / nTransPerBoard;
            final int index = order % nTransPerBoard;
              
            //interwine data
            int position = intertwinedPosition(index, halfTrans);
            position += board*nTransPerBoard;
            data[position] = phase;
        }
        
            
        //send
        if (multipleBoards){ //if we have multiple boards, use multithread.
            final Thread[] threads = new Thread[MAX_BOARDS];
            for (int i = 0; i < MAX_BOARDS; ++i) {
                if (serialComs[i] != null) {
                    threads[i] = new SenderThread(serialComs[i], nTransPerBoard, nTransPerBoard*i, data);
                    threads[i].start();
                }
            }
            for (int i = 0; i < MAX_BOARDS; ++i) {
                if (threads[i] != null){
                    try {
                        threads[i].join();
                    } catch (InterruptedException ex) {
                        Logger.getLogger(TransControlPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }else{ //if we have only one board send with this thread
            serialComs[0].writeByte( 200 ); //send the key
            serialComs[0].write(nTransPerBoard, data, 0);
        }
    }
    
    public boolean isDynamicTables(){
        return dynamicTablesCheck.isSelected();
    }

    void sendAnimation(ArrayList<AnimKeyFrame> elements) {
        if (serialComs[0] == null) { return; }
        
        //send command code (1)
        serialComs[0].writeByte(1);
        
        //calculate the entries
        final int frames = elements.size();
        final int nTransducers = mf.miscPanel.getTransducersNumber();
        final int phaseDivs = mf.miscPanel.getPhaseDiscretization() * 2;
        //[frame][byte][div]
        final int[][][] data = new int[frames][][];
        int index = 0;
        for(AnimKeyFrame k : elements){
            data[index++] = k.generateTables(phaseDivs, nTransducers);
        }
        
        //send table size ushort
        serialComs[0].writeUShort( frames );
        
        //send data
        for(int i = 0; i < frames; ++i){ //frame
            for(int j = 0; j < phaseDivs; ++j){ //div
                for(int m = 0; m < 8; m+=2){ //nbyte
                    serialComs[0].writeByte( data[i][m+1][j] );
                    serialComs[0].writeByte( data[i][m][j] );
                }
            }
        }
    }

    void sendSetFrame(int selected) {
        if (serialComs[0] == null) { return; }
        
        //send command code (2)
        serialComs[0].writeByte(2);
        //send frame number as an ushort
        serialComs[0].writeUShort(selected);
    }
    

    public class SenderThread extends Thread{
        final private SerialComms comm;
        final private int length,offset;
        final private int[] data;

        public SenderThread(SerialComms comm, int length, int offset, int[] data) {
            this.comm = comm;
            this.length = length;
            this.offset = offset;
            this.data = data;
        }

        @Override
        public void run() {
            comm.write(length, data, offset);
        }
 
    }
    
    void initSerialComm(int port){
        stopSerialComm();
        serialComs[0] = new SerialComms(port);
    }
    
    void stopSerialComm(){
        for(SerialComms serialCom : serialComs){
            if(serialCom != null){
                try {
                    serialCom.disconnect();
                }catch(Exception e){}
            }
            serialCom = null;
        }
    }
    
    void sendUHData() throws IOException{
        final int UH_nCores = getNCores();
        final int UH_transPerCore = getNTrans();
        
        if (usbDevice != null){
            final int transUH = UH_nCores * UH_transPerCore;
            
            //create array
            int[] delays = new int[transUH];
            boolean[] on = new boolean[transUH];
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            DataOutputStream o = new DataOutputStream(bos);

            //fill it with off
            for(int i = 0; i < transUH; ++i){
                delays[i] = 0;
                on[i] = false;
            }
            
            //fill with transducer data
            for(Transducer t : mf.simulation.transducers){
                final int label = t.getOrderNumber();
                if (label < 0 || label >= transUH){
                    continue;
                }
                
                if (t.getPAmplitude() > 0.0f){
                   int phase = (Math.round(t.getPhase() * UH_phaseDisc)) % (UH_phaseDisc*2);
                   if (phase < 0) { phase += UH_phaseDisc*2; }
               
                   delays[label] = phase;
                   on[label] = true;
                }

            }
        
            final boolean frMod = frModCheck.isSelected();
            final int frMod0 = Parse.stringToInt( frModText.getText() );
            
            //send header
            o.writeByte(UH_nCores); //ncores
            o.writeByte(frMod ? 1 : 0); //fr modulation
            o.writeShort( Short.reverseBytes( (short) frMod0 ) ); //fr 1
            o.writeShort(0); //fr 2
            o.writeShort(0); //fr 3
            o.writeShort(0); //fr 4
            byte[] data;
           
            o.flush();
            data = bos.toByteArray();
            usbDevice.send(data);
           
            //send delays/duty for the transducers
            int index = 0; 
            for(int j = 0; j < UH_nCores; ++j){
                bos.reset();
                for (int i = 0; i < UH_transPerCore; ++i) {
                    o.writeByte( delays[index] ); //delay
                    o.writeByte( on[index] ? UH_phaseDisc : 0); //dutycicle
                    index++;
                }
                data = bos.toByteArray();
                usbDevice.send(data);
            }
        }
    }
    
    void initUHComm(){
        stopUHComm();
        String[] parameters = addressText.getText().split("\\.");
        int vendorId = Integer.parseInt( parameters[0] );
        int productId = Integer.parseInt( parameters[1] );
        int configuration = Integer.parseInt( parameters[2] );
        int inter = Integer.parseInt( parameters[3] );
        int endPoint = Integer.parseInt( parameters[4] );
        
        usbDevice = new UsbDevice(vendorId, productId);
        usbDevice.open(configuration, inter);
        usbDevice.setEndPoint(endPoint);
    }
    
    void stopUHComm(){
        if(usbDevice != null){
            try {
                setOffUH();
                usbDevice.close();
            }catch(Exception e){}
        }
        usbDevice = null;
    }
    
    void setOffUH() throws IOException{
        final int UH_nCores = getNCores();
        final int UH_transPerCore = getNTrans();
        
        if (usbDevice != null){
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            DataOutputStream o = new DataOutputStream(bos);

            //send header
            o.writeByte(UH_nCores); //ncores
            o.writeByte(0); //fr modulation
            o.writeShort(0); //fr 1
            o.writeShort(0); //fr 2
            o.writeShort(0); //fr 3
            o.writeShort(0); //fr 4
            byte[] data;
           
            o.flush();
            data = bos.toByteArray();
            usbDevice.send(data);
           
            //send delays/duty for the transducers
            for(int j = 0; j < UH_nCores; ++j){
                bos.reset();
                for (int i = 0; i < UH_transPerCore; ++i) {
                    o.writeByte( 0 ); //delay
                    o.writeByte( 0 ); //dutycicle
                }
                data = bos.toByteArray();
                usbDevice.send(data);
            }
        }
    }
    
    public void connect(boolean serial, int portNumber) {
        if (serial){
            initSerialComm( portNumber );
        }else{
            initUHComm();
        }
    }

    public JCheckBox getAmpCheck() {
        return ampCheck;
    }

    public JTextField getLabelText() {
        return labelText;
    }

    public JSpinner getPhaseSpinner() {
        return phaseSpinner;
    }
    
    
    public void updateClones(){
        for(Transducer t : transducersCopy.keySet()){
            final ArrayList<Transducer> targets = transducersCopy.get(t);
            final ArrayList<Float> offsets = transducersCopyOffsets.get(t);
            
            final float phase = t.getPhase();
            final float amp = t.getPAmplitude();
            final int N = Math.max( targets.size(), offsets.size());
            for(int i = 0; i < N; ++i){
                final Transducer target = targets.get(i);
                target.setPAmplitude( amp );
                target.setPhase( phase + offsets.get(i));
            }
        }
    }
    
    public void addCopiesFromSelection(){
        final ArrayList<Entity> sel = mf.getSelection();
        final ArrayList<Transducer> trans = new ArrayList<>();
        for(Entity e : sel){
            if(e instanceof Transducer){
                trans.add( (Transducer) e);
            }
        }
        final int nTrans = trans.size();
        if(nTrans < 2) { return; }
        
        final ArrayList<Transducer> tTargets = new ArrayList<>(nTrans - 1);
        final ArrayList<Float> tOffsets = new ArrayList<>(nTrans - 1);
        final Transducer first = trans.get(0);
        trans.remove(0);
        for(Transducer t : trans){
            tTargets.add( t );
            tOffsets.add( t.getPhase() );
        }
        transducersCopy.put(first, tTargets);
        transducersCopyOffsets.put(first, tOffsets);
    }
    
    public void clearCopies(){
        transducersCopy.clear();
        transducersCopyOffsets.clear();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField addressText;
    private javax.swing.JCheckBox ampCheck;
    private javax.swing.JCheckBox autoCheck;
    private javax.swing.JButton connectAllButton;
    private javax.swing.JTextField coresText;
    private javax.swing.JCheckBox dynamicTablesCheck;
    private javax.swing.JCheckBox frModCheck;
    private javax.swing.JTextField frModText;
    private javax.swing.JButton initSerialButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton labelButton;
    private javax.swing.JTextField labelText;
    private javax.swing.JTextField periods2Text;
    private javax.swing.JButton periodsButton;
    private javax.swing.JTextField periodsText;
    private javax.swing.JSpinner phaseSpinner;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton sendButton;
    private javax.swing.JRadioButton serialRadio;
    private javax.swing.JButton stopSerialButton;
    private javax.swing.JButton switchBetween1_2Button;
    private javax.swing.ButtonGroup targetDeviceGroup;
    private javax.swing.JTextField transText;
    private javax.swing.JRadioButton uhRadio;
    // End of variables declaration//GEN-END:variables

    
}
