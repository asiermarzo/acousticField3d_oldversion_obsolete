/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package acousticfield3d.gui;

import acousticfield3d.math.FastMath;
import acousticfield3d.math.Quaternion;
import acousticfield3d.math.Transform;
import acousticfield3d.math.Vector3f;
import acousticfield3d.scene.Entity;
import acousticfield3d.scene.Scene;
import acousticfield3d.simulation.Transducer;
import com.leapmotion.leap.Controller;
import com.leapmotion.leap.Frame;
import com.leapmotion.leap.Hand;
import com.leapmotion.leap.Listener;
import com.leapmotion.leap.Vector;
import java.io.IOException;
import java.util.ArrayList;

/**
 *
 * @author Asier
 */
public class LeapMotionForm extends javax.swing.JFrame {
    final MainForm mf;
    
    final ArrayList<Transform> originalTransforms = new ArrayList<>();
    Transducer transRoot = null;
    final ArrayList<Transform> diffFromRoot = new ArrayList<>();
    final Vector3f diffPos = new Vector3f();
    final Vector3f leapPosition = new Vector3f();
    final Vector3f leapRotation = new Vector3f();
    final Vector3f leapDefaultOrientation = new Vector3f();
    
    final Quaternion leapRotationQuat = new Quaternion();
    
    public LeapMotionForm(MainForm mf) {
        this.mf = mf;
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        initLeapButton = new javax.swing.JButton();
        startButton = new javax.swing.JButton();
        updateCheck = new javax.swing.JCheckBox();
        calcCheck = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Leap Controller");

        initLeapButton.setText("Init Leap");
        initLeapButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initLeapButtonActionPerformed(evt);
            }
        });

        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        updateCheck.setSelected(true);
        updateCheck.setText("update");

        calcCheck.setText("calc");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(updateCheck)
                        .addGap(184, 184, 184)
                        .addComponent(calcCheck)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(initLeapButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(startButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(initLeapButton)
                    .addComponent(startButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateCheck)
                    .addComponent(calcCheck))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initLeapButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initLeapButtonActionPerformed
        LeapThread thread = new LeapThread(this);
        thread.start();
    }//GEN-LAST:event_initLeapButtonActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
     
        //set the root (first in selection)
        Entity e = Scene.getFirstWithTag(mf.selection, Entity.TAG_TRANSDUCER);
        if (e != null && (e instanceof Transducer)){
            transRoot = (Transducer)e;
        }else{
            return;
        }
        
        final Transform rootTrans = transRoot.getTransform();
        final Transform invRootTrans = rootTrans.clone();
        invRootTrans.invertLocalNoScale();
        
        //calculate diff from root
        diffPos.set( rootTrans.getTranslation() ).subtractLocal( leapPosition );
        
        //calculate diff orientation
        leapDefaultOrientation.set( leapRotation );
        
        //calculate transforms from root
        final int n = mf.simulation.transducers.size();
        diffFromRoot.clear(); diffFromRoot.ensureCapacity(n);
        for(Transducer t : mf.simulation.transducers){
            final Transform trans = t.getTransform().clone();
            trans.combineWithParentNoScale( invRootTrans );
            diffFromRoot.add( trans );
        }
    }//GEN-LAST:event_startButtonActionPerformed

    void updateHand(){
        if(transRoot != null){
            final Transform rootTransform = transRoot.getTransform();
            rootTransform.getTranslation().set( leapPosition );
            rootTransform.getTranslation().addLocal( diffPos );
            
            leapRotationQuat.fromAngles(
                    leapRotation.x - leapDefaultOrientation.x, 
                    leapDefaultOrientation.y - leapRotation.y, 
                    leapRotation.z - leapDefaultOrientation.z);
            
            rootTransform.getRotation().set( leapRotationQuat );
            
            //combine root with diffTrans
            final int m = Math.min( mf.simulation.transducers.size(), diffFromRoot.size() );
            for(int i = 0; i < m; ++i){
                final Transducer t = mf.simulation.transducers.get(i);
                if ( t != transRoot ){
                    t.getTransform().set( diffFromRoot.get(i) );
                    t.getTransform().combineWithParentNoScale( rootTransform );
                }
            }
            
            if (calcCheck.isSelected() || updateCheck.isSelected()) {
                mf.needUpdate();
            }
        }
    }
    
    public void tick(){
       //autocalc and send
        if (calcCheck.isSelected()) {
            mf.movePanel.doAutoCalcAndSend(false);
        }
    }
    
    public void snapTransducersTransform(){
        //save transform for all the transducers
        final int n = mf.simulation.transducers.size();
        originalTransforms.clear(); originalTransforms.ensureCapacity(n);
        for(Transducer t : mf.simulation.transducers){
            originalTransforms.add( t.getTransform().clone() );
        }
    }
    
    public void restoreTransducersTransform(){
        final int ms = Math.min( originalTransforms.size(), mf.simulation.transducers.size());
        for(int i = 0; i < ms; ++i){
            mf.simulation.transducers.get(i).getTransform().set( originalTransforms.get(i) );
        }
    }
    

    
    //<editor-fold defaultstate="collapsed" desc="Leap Stuff">
    public class LeapThread extends Thread{
        final LeapMotionForm leapMotionFrame;
        
        public LeapThread(LeapMotionForm leapMotionFrame) {
            this.leapMotionFrame = leapMotionFrame;
        }
        
        @Override
        public void run() {
            SampleListener listener = new SampleListener(leapMotionFrame);
            Controller controller = new Controller();
            // Have the sample listener receive events from the controller
            controller.addListener(listener);
            try {
                System.in.read();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
    
    public class SampleListener extends Listener{
        final LeapMotionForm leapMotionFrame;
        
        public SampleListener(LeapMotionForm leapMotionFrame){
            
            this.leapMotionFrame = leapMotionFrame;
        }
        
        @Override
        public void onInit(Controller controller) {
            System.out.println("Initialized");
        }
        
        @Override
        public void onConnect(Controller controller) {
            System.out.println("Connected");
        }
        
        @Override
        public void onDisconnect(Controller controller) {
            //Note: not dispatched when running in a debugger.
            System.out.println("Disconnected");
        }
        
        @Override
        public void onExit(Controller controller) {
            System.out.println("Exited");
        }
        
        @Override
        public void onFrame(Controller controller) {
            // Get the most recent frame and report some basic information
            Frame frame = controller.frame();
            
            //Get hands
            for (Hand hand : frame.hands()) {
                final Vector palmPos = hand.palmPosition();
                
                leapPosition.set(palmPos.getX(), palmPos.getY(), palmPos.getZ());
                leapPosition.divideLocal(1000.0f);
                
                final Vector direction = hand.direction();
                final Vector normal = hand.palmNormal();

                leapRotation.set( direction.pitch(), direction.yaw(), normal.roll() );
               
                leapMotionFrame.updateHand();
            }
        }
    }
    
//</editor-fold>
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox calcCheck;
    private javax.swing.JButton initLeapButton;
    private javax.swing.JButton startButton;
    private javax.swing.JCheckBox updateCheck;
    // End of variables declaration//GEN-END:variables
}
