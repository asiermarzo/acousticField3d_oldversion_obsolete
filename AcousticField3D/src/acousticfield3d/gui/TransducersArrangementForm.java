/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package acousticfield3d.gui;

import acousticfield3d.math.FastMath;
import acousticfield3d.math.Quaternion;
import acousticfield3d.math.Transform;
import acousticfield3d.math.Vector3f;
import acousticfield3d.scene.Entity;
import acousticfield3d.scene.Scene;
import acousticfield3d.simulation.Simulation;
import acousticfield3d.simulation.Transducer;
import acousticfield3d.utils.Parse;
import java.util.ArrayList;

/**
 *
 * @author Asier
 */
public class TransducersArrangementForm extends javax.swing.JFrame {

    
    final MainForm form;
    final Simulation simulation;
    final Scene scene;
    
    /**
     * Creates new form TransducersArrangementForm
     */
    public TransducersArrangementForm(MainForm form) {
        this.form = form;
        this.scene = form.scene;
        this.simulation = form.simulation;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        arrangementGroup = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        colSpinner = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        rowSpinner = new javax.swing.JSpinner();
        okButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        posText = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        rotText = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        spaceText = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        sizeText = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        wText = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        pText = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        freqText = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        phaseText = new javax.swing.JTextField();
        gridCheck = new javax.swing.JRadioButton();
        hexCheck = new javax.swing.JRadioButton();
        radialCheck = new javax.swing.JRadioButton();
        hemisphereCheck = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        objArea = new javax.swing.JTextArea();
        importObjButton = new javax.swing.JButton();
        centerObjCheck = new javax.swing.JCheckBox();
        scaleObjText = new javax.swing.JTextField();

        setTitle("Arrangement");

        jLabel1.setText("Columns:");

        colSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));

        jLabel2.setText("Rows:");

        rowSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));

        okButton.setText("Ok");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("XYZ:");

        posText.setText("0.00 0.00 0.00");

        jLabel4.setText("RX RY RZ:");

        rotText.setText("0.00 0.00 0.00");

        jLabel5.setText("Space:");

        spaceText.setText("0.01");

        jLabel6.setText("Size:");

        sizeText.setText("0.01");

        jLabel7.setText("W:");

        wText.setText("0.0025");

        jLabel8.setText("P:");

        pText.setText("5.6");

        jLabel9.setText("Freq:");

        freqText.setText("40000");

        jLabel10.setText("Phase:");

        phaseText.setText("0");

        arrangementGroup.add(gridCheck);
        gridCheck.setSelected(true);
        gridCheck.setText("grid");

        arrangementGroup.add(hexCheck);
        hexCheck.setText("hex");

        arrangementGroup.add(radialCheck);
        radialCheck.setText("radial");

        arrangementGroup.add(hemisphereCheck);
        hemisphereCheck.setText("hemisphere");

        objArea.setColumns(20);
        objArea.setRows(5);
        jScrollPane1.setViewportView(objArea);

        importObjButton.setText("Import from Obj");
        importObjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importObjButtonActionPerformed(evt);
            }
        });

        centerObjCheck.setText("center");

        scaleObjText.setText("0.0254");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(posText))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rotText))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(freqText, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(phaseText))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sizeText))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(wText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pText))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(spaceText))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(colSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel2)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rowSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(okButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(gridCheck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(hexCheck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(radialCheck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(hemisphereCheck))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(importObjButton)
                                .addGap(18, 18, 18)
                                .addComponent(scaleObjText)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(centerObjCheck)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(colSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(rowSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(okButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gridCheck)
                    .addComponent(hexCheck)
                    .addComponent(radialCheck)
                    .addComponent(hemisphereCheck))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(spaceText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(posText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(rotText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(freqText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(phaseText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(sizeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(wText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(pText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(importObjButton)
                    .addComponent(centerObjCheck)
                    .addComponent(scaleObjText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    static void duplicate(MainForm mf) {
        final ArrayList<Entity> selection = mf.getSelection();
        final ArrayList<Transducer> transducers = new ArrayList<>();
        for(Entity e : selection){
            if (e instanceof Transducer){
                transducers.add( (Transducer) e);
            }
        }
        
        for(Transducer t : transducers){
            final Transducer copy = t.createReflectedCopy();
            final int tNumber = mf.simulation.getTransducers().size();
            final String name = "t" + tNumber;
            copy.setIsVirtualReflection( false );
            
            
            copy.setTag(Entity.TAG_TRANSDUCER);
            copy.name = name;
            copy.initFromSimulation(mf.simulation);
            mf.simulation.transducers.add(copy);
            mf.simulation.addTransToAnimationsKeys(copy);
        }
        //mf.initSimulation();
    }
    
    public Transducer createTransducer() {
        final float freq = Float.parseFloat(freqText.getText());
        final float phase = Float.parseFloat(phaseText.getText());
        final float size = Float.parseFloat(sizeText.getText());
        final float width = Float.parseFloat(wText.getText());
        final float power = Float.parseFloat(pText.getText());

        Transducer t = new Transducer();
        int tNumber = simulation.getTransducers().size();
        String name = "t" + tNumber;
        t.name = name;

        t.width = width;
        t.size = size;
        t.pAmplitude = 1;
        t.phase = phase * FastMath.PI;
        t.frequency = freq;
        t.power = power;
        t.setTag(Entity.TAG_TRANSDUCER);

        t.initFromSimulation(simulation);

        return t;
    }
    
    public void addTransducer(final Transducer t) {
        simulation.transducers.add(t);
        simulation.addTransToAnimationsKeys(t);
    }
    
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        if (gridCheck.isSelected() || hexCheck.isSelected()){
            gridOrHexArrangement();
        }else if( radialCheck.isSelected() ){
            radialArrangement();
        }else if (hemisphereCheck.isSelected()){
            hemisphereArrangement();
        }
        
        form.initSimulation();
        dispose();
    }//GEN-LAST:event_okButtonActionPerformed

    private void importObjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importObjButtonActionPerformed
        final boolean center = centerObjCheck.isSelected();
        final String[] lines = objArea.getText().split("\\n");
        final float scale = Parse.stringToFloat( scaleObjText.getText() );

        final ArrayList<Vector3f> positions = new ArrayList<>();
        final ArrayList<ArrayList<Integer>> faces = new ArrayList<>();

        int vIndex = 0;
        Vector3f total = new Vector3f();
        for (String l : lines) {
            if(l.startsWith("v")){
                String[] coords = l.split(" ");
                Vector3f v = new Vector3f();
                v.x = Float.parseFloat( coords[2] );
                v.y = Float.parseFloat( coords[3] );
                v.z = Float.parseFloat( coords[4] );
                
                v.multLocal(scale);
                
                total.addLocal(v);
                positions.add( v );
                vIndex++;
            }
            if(l.startsWith("f")){
                String[] inds = l.split(" ");
                final int length = inds.length;
                ArrayList<Integer> face = new ArrayList<>();
                for(int i = 2; i < length; ++i){
                    face.add( Integer.parseInt( inds[i] ) );
                }
                faces.add( face );
            }
        }
        total.divideLocal( vIndex );
        if(center){
            for(Vector3f v : positions){
                v.subtract( total );
            }
        }
        
        ArrayList<Vector3f> faceV = new ArrayList<>();
        for( ArrayList<Integer> face : faces){
            faceV.clear();
            for(Integer i : face){
                faceV.add( positions.get(i - 1) ); //obj starts numbering from 1
            }
            Vector3f pos = Vector3f.calcAverage( faceV );
            Vector3f normal = Vector3f.calcNormal( faceV );
            
            Transducer t = createTransducer();
                
            t.getTransform().setTranslation( pos );
            Quaternion q = new Quaternion();
            q.lookAt(normal, Vector3f.UNIT_Y);
            q.rotateLocalSpace(FastMath.degToRad( 90 ), 0, 0);
            t.getTransform().getRotation().set(q);

            simulation.transducers.add(t);
            simulation.addTransToAnimationsKeys(t);
        }
        
        form.initSimulation();
    }//GEN-LAST:event_importObjButtonActionPerformed
    
    private void radialArrangement() throws NumberFormatException {
        final int nPerCircle = (Integer)colSpinner.getValue();
        final int nPerRow = (Integer)rowSpinner.getValue();
        final float space = Float.parseFloat( spaceText.getText() );
        
        final Vector3f pos = new Vector3f().parse( posText.getText() );
        final Vector3f rot = new Vector3f().parse( rotText.getText() ).multLocal(FastMath.PI / 180.0f);
        
        Quaternion q = new Quaternion().fromAngles(rot.x, rot.y, rot.z);
        Transform tr = new Transform(pos, q);
        
        final float angle = FastMath.TWO_PI / nPerCircle;
        final float initRadious = space/2.0f * (1.0f / FastMath.sin( angle / 2));
        
        for (int c = 0; c < nPerCircle; ++c){
            for(int r = 0; r < nPerRow; ++r){
                final float cAngle = angle * c;
                final float distance = initRadious + r*space;
                
                Transducer t = createTransducer();
                
                t.getTransform().setTranslation( FastMath.cos(cAngle) * distance, 0 , FastMath.sin(cAngle) * distance );
                tr.transformPoint( t.getTransform().getTranslation() , t.getTransform().getTranslation());
                t.getTransform().getRotation().set( q );
                
                simulation.transducers.add(t);
                simulation.addTransToAnimationsKeys(t);
            }
        }
    }
    
    private void hemisphereArrangement() throws NumberFormatException {
        final int nTransducers = (Integer)colSpinner.getValue();    
        final float space = Float.parseFloat( spaceText.getText() );
        final float radious = (Integer)rowSpinner.getValue() * space;
        
        final Vector3f pos = new Vector3f().parse( posText.getText() );
        final Vector3f rot = new Vector3f().parse( rotText.getText() ).multLocal(FastMath.PI / 180.0f);
        
        Quaternion q = new Quaternion().fromAngles(rot.x, rot.y, rot.z);
        Transform tr = new Transform(pos, q);
        
        final float angle = FastMath.TWO_PI / nTransducers;
        
        for (int c = 0; c < nTransducers; ++c){
                final float cAngle = angle * c;
                
                Transducer t = createTransducer();
                
                t.getTransform().setTranslation( FastMath.cos(cAngle) * radious, 0 , FastMath.sin(cAngle) * radious );
                
                tr.transformPoint( t.getTransform().getTranslation() , t.getTransform().getTranslation());
                t.getTransform().getRotation().set( q );
                
                simulation.transducers.add(t);
                simulation.addTransToAnimationsKeys(t);
        }
    }
    
    private void gridOrHexArrangement() {
        final int columns = (Integer)colSpinner.getValue();
        final int row = (Integer)rowSpinner.getValue();
        final float space = Float.parseFloat( spaceText.getText() );
        final float sqrt3Half = FastMath.sqrt(3.0f) / 2.0f;
        final float spaceOdd = space * sqrt3Half;
        final Vector3f pos = new Vector3f().parse( posText.getText() );
        final Vector3f rot = new Vector3f().parse( rotText.getText() ).multLocal(FastMath.PI / 180.0f);
        
        boolean isHex = hexCheck.isSelected();
        
        Quaternion q = new Quaternion().fromAngles(rot.x, rot.y, rot.z);
        Transform tr = new Transform(pos, q);
        
        float cp = (columns-1) * space / 2.0f;
        for (int c = 0; c < columns; ++c){
            float cr = (row-1) * (isHex ? spaceOdd : space) / 2.0f;
            for(int r = 0; r < row; ++r){
                
                float actualCp = cp;
                if (isHex && r % 2 == 1){
                    actualCp -= space/2.0f;
                }
                Transducer t = createTransducer();
                
                t.getTransform().setTranslation( actualCp, 0 , cr );
                tr.transformPoint( t.getTransform().getTranslation() , t.getTransform().getTranslation());
                t.getTransform().getRotation().set( q );
                
                simulation.transducers.add(t);
                simulation.addTransToAnimationsKeys(t);
                
                cr -= (isHex ? spaceOdd : space);
            }
            cp -= space;
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup arrangementGroup;
    private javax.swing.JCheckBox centerObjCheck;
    private javax.swing.JSpinner colSpinner;
    private javax.swing.JTextField freqText;
    private javax.swing.JRadioButton gridCheck;
    private javax.swing.JRadioButton hemisphereCheck;
    private javax.swing.JRadioButton hexCheck;
    private javax.swing.JButton importObjButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea objArea;
    private javax.swing.JButton okButton;
    private javax.swing.JTextField pText;
    private javax.swing.JTextField phaseText;
    private javax.swing.JTextField posText;
    private javax.swing.JRadioButton radialCheck;
    private javax.swing.JTextField rotText;
    private javax.swing.JSpinner rowSpinner;
    private javax.swing.JTextField scaleObjText;
    private javax.swing.JTextField sizeText;
    private javax.swing.JTextField spaceText;
    private javax.swing.JTextField wText;
    // End of variables declaration//GEN-END:variables
}
