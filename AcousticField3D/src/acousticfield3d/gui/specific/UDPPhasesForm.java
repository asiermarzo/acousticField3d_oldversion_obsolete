/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package acousticfield3d.gui.specific;

import acousticfield3d.gui.MainForm;
import acousticfield3d.math.FastMath;
import acousticfield3d.simulation.Transducer;
import acousticfield3d.utils.Parse;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.SocketException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author am14010
 */
public class UDPPhasesForm extends javax.swing.JFrame {
    final MainForm mf;
    private Thread t = null;
    float[] phaseOffsets;
    
    public UDPPhasesForm(MainForm mf) {
        this.mf = mf;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        portText = new javax.swing.JTextField();
        openButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        pickPhaseOffset = new javax.swing.JButton();
        printPhaseButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        jLabel1.setText("Port:");

        portText.setText("8008");

        openButton.setText("Open");
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        pickPhaseOffset.setText("Pick phase offset");
        pickPhaseOffset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pickPhaseOffsetActionPerformed(evt);
            }
        });

        printPhaseButton.setText("Print phases");
        printPhaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printPhaseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(portText, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(openButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closeButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pickPhaseOffset)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(printPhaseButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(portText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(openButton)
                    .addComponent(closeButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pickPhaseOffset)
                    .addComponent(printPhaseButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closePort(){
        if (t != null){
            t.interrupt();
            t = null;
        }
    } 
    
    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        closePort();
        t = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    final DatagramSocket serverSocket = new DatagramSocket( Parse.stringToInt(portText.getText()));
                    final byte[] receiveData = new byte[1024];
                    final List<Transducer> trans = new ArrayList<>(mf.simulation.transducers);
                    
                    final int size = trans.size();
                    phaseOffsets = new float[size];
                    DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
                        
                    while(! Thread.interrupted()) {
                        
                        serverSocket.receive(receivePacket);
                        String sentence = new String(receivePacket.getData(), 0, receivePacket.getLength());
                        
                        String[] s = sentence.split(" ");
                        if (s.length >= 2){
                            final int n = Parse.stringToInt( s[0] );
                            final float phase = Parse.stringToFloat( s[1] );
                            
                            if (! Float.isNaN( phase ) ){
                                if (n >= 0 && n < size){
                                    trans.get(n).setPhase( (phase / FastMath.PI) - phaseOffsets[n]);
                                }
                                if (n == size-1){
                                    mf.needUpdate();
                                }
                            }
                        }

                    }
                    
                    serverSocket.close();
                } catch (SocketException ex) {
                    Logger.getLogger(UDPPhasesForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(UDPPhasesForm.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }
        });
        t.start();
    }//GEN-LAST:event_openButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
       closePort();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void pickPhaseOffsetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pickPhaseOffsetActionPerformed
        final List<Transducer> trans = mf.simulation.transducers;
        final int size = trans.size();
        for (int i = 0; i < size; ++i){
            phaseOffsets[i] = trans.get(i).getPhase();
        }
    }//GEN-LAST:event_pickPhaseOffsetActionPerformed

    private void printPhaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printPhaseButtonActionPerformed
        final List<Transducer> trans = new ArrayList<>(mf.simulation.transducers);
        for(Transducer t : trans){
            System.out.println("Phase " + t.getPhase());
        }
    }//GEN-LAST:event_printPhaseButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton openButton;
    private javax.swing.JButton pickPhaseOffset;
    private javax.swing.JTextField portText;
    private javax.swing.JButton printPhaseButton;
    // End of variables declaration//GEN-END:variables
}
