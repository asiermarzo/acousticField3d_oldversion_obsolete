/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package acousticfield3d.gui;

import acousticfield3d.math.FastMath;
import acousticfield3d.math.Vector3f;
import acousticfield3d.scene.Entity;
import acousticfield3d.scene.MeshEntity;
import acousticfield3d.scene.Resources;
import acousticfield3d.utils.Color;
import acousticfield3d.utils.Parse;
import java.util.ArrayList;

/**
 *
 * @author Asier
 */
public class GroundBarsAndSlicesForm extends javax.swing.JFrame {
    MainForm mf;
    
    public GroundBarsAndSlicesForm(MainForm mf) {
        this.mf = mf;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        barsGroup = new javax.swing.ButtonGroup();
        jRadioButton2 = new javax.swing.JRadioButton();
        jTextField2 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        barsWidthText = new javax.swing.JTextField();
        fromSelectionCheck = new javax.swing.JRadioButton();
        toYCheck = new javax.swing.JRadioButton();
        toYText = new javax.swing.JTextField();
        barsButton = new javax.swing.JButton();
        slicesButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        slicesWidthText = new javax.swing.JTextField();
        xSliceCheck = new javax.swing.JCheckBox();
        ySliceCheck = new javax.swing.JCheckBox();
        zSliceCheck = new javax.swing.JCheckBox();

        jRadioButton2.setText("jRadioButton2");

        jTextField2.setText("jTextField2");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add bars or slices");

        jLabel2.setText("width:");

        barsWidthText.setText("0.0004");

        barsGroup.add(fromSelectionCheck);
        fromSelectionCheck.setSelected(true);
        fromSelectionCheck.setText("fromSelection");

        barsGroup.add(toYCheck);
        toYCheck.setText("toY");

        toYText.setText("0.000");

        barsButton.setText("Bars");
        barsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                barsButtonActionPerformed(evt);
            }
        });

        slicesButton.setText("Slices");
        slicesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                slicesButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("width:");

        slicesWidthText.setText("0.01");

        xSliceCheck.setSelected(true);
        xSliceCheck.setText("X");

        ySliceCheck.setText("Y");

        zSliceCheck.setText("Z");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(xSliceCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ySliceCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(zSliceCheck))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(fromSelectionCheck)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(toYCheck)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(toYText, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(barsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(slicesButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(slicesWidthText))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(12, 12, 12)
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(barsWidthText))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(barsWidthText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(barsButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(slicesButton)
                    .addComponent(jLabel3)
                    .addComponent(slicesWidthText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(xSliceCheck)
                    .addComponent(ySliceCheck)
                    .addComponent(zSliceCheck))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fromSelectionCheck)
                    .addComponent(toYCheck)
                    .addComponent(toYText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void barsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_barsButtonActionPerformed
        final float width = Parse.stringToFloat( barsWidthText.getText() );
        final boolean fromSelection = fromSelectionCheck.isSelected();
        final float toY = Parse.stringToFloat( toYText.getText() );
        
        Entity center = null;
        if (fromSelection){
            if(mf.selection.isEmpty()){
                return;
            }else{
                center = mf.selection.get(0);
            }
        }
        
        final ArrayList<MeshEntity> beads = new ArrayList<>();
        mf.scene.gatherMeshEntitiesWithTag(beads, Entity.TAG_CONTROL_POINT);
        for(MeshEntity b : beads){
            if (b == center){ continue; }
            
            MeshEntity me = new MeshEntity(Resources.MESH_BOX, null, Resources.SHADER_SOLID_SPEC);
            me.setTag( Entity.TAG_MASK ); me.setColor( Color.WHITE );
            mf.addMeshEntityToSceneCenter(me);
            
            //scale
            me.getTransform().getScale().x = width;
            me.getTransform().getScale().z = width;
            if (fromSelection){
                me.getTransform().getScale().y = b.getTransform().getTranslation().distance( 
                        center.getTransform().getTranslation());
            }else{
                me.getTransform().getScale().y = b.getTransform().getTranslation().y - toY;
            }
            
            //position
            if (fromSelection){
                me.getTransform().getTranslation().set( b.getTransform().getTranslation() );
                me.getTransform().getTranslation().addLocal( center.getTransform().getTranslation() );
                me.getTransform().getTranslation().divideLocal( 2.0f );
            }else{
                me.getTransform().getTranslation().x = b.getTransform().getTranslation().x;
                me.getTransform().getTranslation().z = b.getTransform().getTranslation().z;
                me.getTransform().getTranslation().y = (b.getTransform().getTranslation().y + toY) / 2.0f;
            }
            
            //rotation
            if (fromSelection){
                me.lookAt( b );
                me.getTransform().rotateLocal(FastMath.degToRad( -90 ), 0, 0);
            }
        }
        
       
        mf.needUpdate();
    }//GEN-LAST:event_barsButtonActionPerformed

    private void slicesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_slicesButtonActionPerformed
        final float width = Parse.stringToFloat( slicesWidthText.getText() );
        final boolean fromSelection = fromSelectionCheck.isSelected();
        final boolean sliceX = xSliceCheck.isSelected();
        final boolean sliceY = ySliceCheck.isSelected();
        final boolean sliceZ = zSliceCheck.isSelected();
        
        Entity center = null;
        if (fromSelection){
            if(mf.selection.isEmpty()){
                return;
            }else{
                center = mf.selection.get(0);
            }
        }
        
        final ArrayList<MeshEntity> beads = new ArrayList<>();
        mf.scene.gatherMeshEntitiesWithTag(beads, Entity.TAG_CONTROL_POINT);
        for(MeshEntity b : beads){
            if (b == center){ continue; }
            
            if(sliceX){
                MeshEntity me = addSlice(b,width);
                if(fromSelection){
                    me.lookAt(center);
                    me.getTransform().rotateLocal(FastMath.HALF_PI, 0, 0);
                }else{
                    me.getTransform().rotate(0, 0, FastMath.HALF_PI );
                }
               
            }
            if (sliceY) {
                MeshEntity me = addSlice(b, width);
                if (fromSelection) {
                    me.lookAt(center);
                } else {
                     me.getTransform().rotateLocal(FastMath.HALF_PI , 0, 0);
                }
            }
            if (sliceZ) {
                MeshEntity me = addSlice(b, width);
                if (fromSelection) {
                    me.lookAt(center);
                    me.getTransform().rotateLocal(0,  FastMath.HALF_PI, 0);
                } else {
                    me.getTransform().rotate(0, FastMath.HALF_PI, 0);
                }
            }
            
            
        }

        mf.needUpdate();
    }//GEN-LAST:event_slicesButtonActionPerformed

    private MeshEntity addSlice(MeshEntity b, float width){
        MeshEntity me = mf.rtSlicePanel.createSlice();
        mf.addMeshEntityToSceneCenter(me);
        //scale
        me.getTransform().getScale().set(width);
        //position
        me.getTransform().getTranslation().set(b.getTransform().getTranslation());

        return me;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton barsButton;
    private javax.swing.ButtonGroup barsGroup;
    private javax.swing.JTextField barsWidthText;
    private javax.swing.JRadioButton fromSelectionCheck;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JButton slicesButton;
    private javax.swing.JTextField slicesWidthText;
    private javax.swing.JRadioButton toYCheck;
    private javax.swing.JTextField toYText;
    private javax.swing.JCheckBox xSliceCheck;
    private javax.swing.JCheckBox ySliceCheck;
    private javax.swing.JCheckBox zSliceCheck;
    // End of variables declaration//GEN-END:variables
}
